{"ast":null,"code":"var _jsxFileName = \"/Users/nickbrinser/Desktop/xStateApp/x-state-proj/src/SubReddit.js\";\nimport React from \"react\";\nimport { useService } from \"@xstate/react\";\nconst dateTimeFormat = new Intl.DateTimeFormat(\"en-US\", {\n  timeStyle: \"long\"\n});\nexport const SubReddit = ({\n  service\n}) => {\n  const [current, send] = useService(service);\n\n  if (current.matches(\"failure\")) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 7\n      }\n    }, \"Failed to load posts.\", \" \", /*#__PURE__*/React.createElement(\"button\", {\n      onClick: _ => send(\"RETRY\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 9\n      }\n    }, \"Retry?\"));\n  }\n\n  const {\n    subreddit,\n    posts,\n    lastUpdated\n  } = current.context;\n  return /*#__PURE__*/React.createElement(\"section\", {\n    \"data-machine\": service.machine.id,\n    \"data-state\": current.toStrings().join(\" \"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 5\n    }\n  }, current.matches(\"loading\") && /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 38\n    }\n  }, \"Loading posts...\"), posts && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"header\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }\n  }, subreddit), /*#__PURE__*/React.createElement(\"small\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }\n  }, \"Last updated: \", dateTimeFormat.format(lastUpdated), \" \", /*#__PURE__*/React.createElement(\"button\", {\n    onClick: _ => send(\"REFRESH\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 15\n    }\n  }, \"Refresh\"))), /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 11\n    }\n  }, posts.map(post => {\n    return /*#__PURE__*/React.createElement(\"li\", {\n      key: post.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 22\n      }\n    }, post.title);\n  }))));\n};","map":{"version":3,"sources":["/Users/nickbrinser/Desktop/xStateApp/x-state-proj/src/SubReddit.js"],"names":["React","useService","dateTimeFormat","Intl","DateTimeFormat","timeStyle","SubReddit","service","current","send","matches","_","subreddit","posts","lastUpdated","context","machine","id","toStrings","join","format","map","post","title"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,eAA3B;AAEA,MAAMC,cAAc,GAAG,IAAIC,IAAI,CAACC,cAAT,CAAwB,OAAxB,EAAiC;AACtDC,EAAAA,SAAS,EAAE;AAD2C,CAAjC,CAAvB;AAIA,OAAO,MAAMC,SAAS,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAiB;AACxC,QAAM,CAACC,OAAD,EAAUC,IAAV,IAAkBR,UAAU,CAACM,OAAD,CAAlC;;AAEA,MAAIC,OAAO,CAACE,OAAR,CAAgB,SAAhB,CAAJ,EAAgC;AAC9B,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCACwB,GADxB,eAEE;AAAQ,MAAA,OAAO,EAAGC,CAAD,IAAOF,IAAI,CAAC,OAAD,CAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF,CADF;AAMD;;AAED,QAAM;AAAEG,IAAAA,SAAF;AAAaC,IAAAA,KAAb;AAAoBC,IAAAA;AAApB,MAAoCN,OAAO,CAACO,OAAlD;AAEA,sBACE;AACE,oBAAcR,OAAO,CAACS,OAAR,CAAgBC,EADhC;AAEE,kBAAYT,OAAO,CAACU,SAAR,GAAoBC,IAApB,CAAyB,GAAzB,CAFd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAIGX,OAAO,CAACE,OAAR,CAAgB,SAAhB,kBAA8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAJjC,EAKGG,KAAK,iBACJ,uDACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKD,SAAL,CADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACiBV,cAAc,CAACkB,MAAf,CAAsBN,WAAtB,CADjB,EACqD,GADrD,eAEE;AAAQ,IAAA,OAAO,EAAGH,CAAD,IAAOF,IAAI,CAAC,SAAD,CAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAFF,CAFF,CADF,eAQE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGI,KAAK,CAACQ,GAAN,CAAWC,IAAD,IAAU;AACnB,wBAAO;AAAI,MAAA,GAAG,EAAEA,IAAI,CAACL,EAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAmBK,IAAI,CAACC,KAAxB,CAAP;AACD,GAFA,CADH,CARF,CANJ,CADF;AAwBD,CAtCM","sourcesContent":["import React from \"react\";\nimport { useService } from \"@xstate/react\";\n\nconst dateTimeFormat = new Intl.DateTimeFormat(\"en-US\", {\n  timeStyle: \"long\",\n});\n\nexport const SubReddit = ({ service }) => {\n  const [current, send] = useService(service);\n\n  if (current.matches(\"failure\")) {\n    return (\n      <div>\n        Failed to load posts.{\" \"}\n        <button onClick={(_) => send(\"RETRY\")}>Retry?</button>\n      </div>\n    );\n  }\n\n  const { subreddit, posts, lastUpdated } = current.context;\n\n  return (\n    <section\n      data-machine={service.machine.id}\n      data-state={current.toStrings().join(\" \")}\n    >\n      {current.matches(\"loading\") && <div>Loading posts...</div>}\n      {posts && (\n        <>\n          <header>\n            <h2>{subreddit}</h2>\n            <small>\n              Last updated: {dateTimeFormat.format(lastUpdated)}{\" \"}\n              <button onClick={(_) => send(\"REFRESH\")}>Refresh</button>\n            </small>\n          </header>\n          <ul>\n            {posts.map((post) => {\n              return <li key={post.id}>{post.title}</li>;\n            })}\n          </ul>\n        </>\n      )}\n    </section>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}