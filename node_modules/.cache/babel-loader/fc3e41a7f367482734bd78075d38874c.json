{"ast":null,"code":"import { Machine, assign } from \"xstate\";\n\nfunction invokeFetchSubreddit(context) {\n  const {\n    subreddit\n  } = context;\n  return fetch(`https://www.reddit.com/r/${subreddit}.json`).then(response => response.json()).then(json => json.data.children.map(child => child.data));\n}\n\nexport const createSubredditMachine = subreddit => {\n  return Machine({\n    id: \"subreddit\",\n    initial: \"loading\",\n    context: {\n      subreddit,\n      // subreddit name passed in\n      posts: null,\n      lastUpdated: null\n    },\n    states: {\n      loading: {\n        invoke: {\n          id: \"fetch-subreddit\",\n          src: invokeFetchSubreddit,\n          onDone: {\n            target: \"loaded\",\n            actions: assign({\n              posts: (_, event) => event.data,\n              lastUpdated: () => Date.now()\n            })\n          },\n          onError: \"failure\"\n        }\n      },\n      loaded: {\n        on: {\n          REFRESH: \"loading\"\n        }\n      },\n      failure: {\n        on: {\n          RETRY: \"loading\"\n        }\n      }\n    }\n  });\n};","map":{"version":3,"sources":["/Users/nickbrinser/Desktop/xStateApp/x-state-proj/src/subbredditMachine.js"],"names":["Machine","assign","invokeFetchSubreddit","context","subreddit","fetch","then","response","json","data","children","map","child","createSubredditMachine","id","initial","posts","lastUpdated","states","loading","invoke","src","onDone","target","actions","_","event","Date","now","onError","loaded","on","REFRESH","failure","RETRY"],"mappings":"AAAA,SAASA,OAAT,EAAkBC,MAAlB,QAAgC,QAAhC;;AAEA,SAASC,oBAAT,CAA8BC,OAA9B,EAAuC;AACrC,QAAM;AAAEC,IAAAA;AAAF,MAAgBD,OAAtB;AAEA,SAAOE,KAAK,CAAE,4BAA2BD,SAAU,OAAvC,CAAL,CACJE,IADI,CACEC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EADf,EAEJF,IAFI,CAEEE,IAAD,IAAUA,IAAI,CAACC,IAAL,CAAUC,QAAV,CAAmBC,GAAnB,CAAwBC,KAAD,IAAWA,KAAK,CAACH,IAAxC,CAFX,CAAP;AAGD;;AAED,OAAO,MAAMI,sBAAsB,GAAIT,SAAD,IAAe;AACnD,SAAOJ,OAAO,CAAC;AACbc,IAAAA,EAAE,EAAE,WADS;AAEbC,IAAAA,OAAO,EAAE,SAFI;AAGbZ,IAAAA,OAAO,EAAE;AACPC,MAAAA,SADO;AACI;AACXY,MAAAA,KAAK,EAAE,IAFA;AAGPC,MAAAA,WAAW,EAAE;AAHN,KAHI;AAQbC,IAAAA,MAAM,EAAE;AACNC,MAAAA,OAAO,EAAE;AACPC,QAAAA,MAAM,EAAE;AACNN,UAAAA,EAAE,EAAE,iBADE;AAENO,UAAAA,GAAG,EAAEnB,oBAFC;AAGNoB,UAAAA,MAAM,EAAE;AACNC,YAAAA,MAAM,EAAE,QADF;AAENC,YAAAA,OAAO,EAAEvB,MAAM,CAAC;AACde,cAAAA,KAAK,EAAE,CAACS,CAAD,EAAIC,KAAJ,KAAcA,KAAK,CAACjB,IADb;AAEdQ,cAAAA,WAAW,EAAE,MAAMU,IAAI,CAACC,GAAL;AAFL,aAAD;AAFT,WAHF;AAUNC,UAAAA,OAAO,EAAE;AAVH;AADD,OADH;AAeNC,MAAAA,MAAM,EAAE;AACNC,QAAAA,EAAE,EAAE;AACFC,UAAAA,OAAO,EAAE;AADP;AADE,OAfF;AAoBNC,MAAAA,OAAO,EAAE;AACPF,QAAAA,EAAE,EAAE;AACFG,UAAAA,KAAK,EAAE;AADL;AADG;AApBH;AARK,GAAD,CAAd;AAmCD,CApCM","sourcesContent":["import { Machine, assign } from \"xstate\";\n\nfunction invokeFetchSubreddit(context) {\n  const { subreddit } = context;\n\n  return fetch(`https://www.reddit.com/r/${subreddit}.json`)\n    .then((response) => response.json())\n    .then((json) => json.data.children.map((child) => child.data));\n}\n\nexport const createSubredditMachine = (subreddit) => {\n  return Machine({\n    id: \"subreddit\",\n    initial: \"loading\",\n    context: {\n      subreddit, // subreddit name passed in\n      posts: null,\n      lastUpdated: null,\n    },\n    states: {\n      loading: {\n        invoke: {\n          id: \"fetch-subreddit\",\n          src: invokeFetchSubreddit,\n          onDone: {\n            target: \"loaded\",\n            actions: assign({\n              posts: (_, event) => event.data,\n              lastUpdated: () => Date.now(),\n            }),\n          },\n          onError: \"failure\",\n        },\n      },\n      loaded: {\n        on: {\n          REFRESH: \"loading\",\n        },\n      },\n      failure: {\n        on: {\n          RETRY: \"loading\",\n        },\n      },\n    },\n  });\n};\n"]},"metadata":{},"sourceType":"module"}