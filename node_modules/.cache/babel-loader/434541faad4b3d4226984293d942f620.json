{"ast":null,"code":"import { __assign, __read, __rest } from './_virtual/_tslib.js';\nimport { IS_PRODUCTION } from './environment.js';\nimport { toSCXMLEvent, isFunction, toEventObject, getEventType, isString, partition, updateContext, flatten, toArray, toGuard, evaluateGuard, warn, isArray } from './utils.js';\nimport { SpecialTargets, ActionTypes } from './types.js';\nimport { send as send$1, update, assign as assign$1, init, raise as raise$1, log as log$1, cancel as cancel$1, error as error$1, pure as pure$1, choose as choose$1 } from './actionTypes.js';\nvar initEvent = /*#__PURE__*/toSCXMLEvent({\n  type: init\n});\n\nfunction getActionFunction(actionType, actionFunctionMap) {\n  return actionFunctionMap ? actionFunctionMap[actionType] || undefined : undefined;\n}\n\nfunction toActionObject(action, actionFunctionMap) {\n  var actionObject;\n\n  if (isString(action) || typeof action === 'number') {\n    var exec = getActionFunction(action, actionFunctionMap);\n\n    if (isFunction(exec)) {\n      actionObject = {\n        type: action,\n        exec: exec\n      };\n    } else if (exec) {\n      actionObject = exec;\n    } else {\n      actionObject = {\n        type: action,\n        exec: undefined\n      };\n    }\n  } else if (isFunction(action)) {\n    actionObject = {\n      // Convert action to string if unnamed\n      type: action.name || action.toString(),\n      exec: action\n    };\n  } else {\n    var exec = getActionFunction(action.type, actionFunctionMap);\n\n    if (isFunction(exec)) {\n      actionObject = __assign(__assign({}, action), {\n        exec: exec\n      });\n    } else if (exec) {\n      var type = action.type,\n          other = __rest(action, [\"type\"]);\n\n      actionObject = __assign(__assign({\n        type: type\n      }, exec), other);\n    } else {\n      actionObject = action;\n    }\n  }\n\n  Object.defineProperty(actionObject, 'toString', {\n    value: function () {\n      return actionObject.type;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return actionObject;\n}\n\nvar toActionObjects = function (action, actionFunctionMap) {\n  if (!action) {\n    return [];\n  }\n\n  var actions = isArray(action) ? action : [action];\n  return actions.map(function (subAction) {\n    return toActionObject(subAction, actionFunctionMap);\n  });\n};\n\nfunction toActivityDefinition(action) {\n  var actionObject = toActionObject(action);\n  return __assign(__assign({\n    id: isString(action) ? action : actionObject.id\n  }, actionObject), {\n    type: actionObject.type\n  });\n}\n/**\r\n * Raises an event. This places the event in the internal event queue, so that\r\n * the event is immediately consumed by the machine in the current step.\r\n *\r\n * @param eventType The event to raise.\r\n */\n\n\nfunction raise(event) {\n  if (!isString(event)) {\n    return send(event, {\n      to: SpecialTargets.Internal\n    });\n  }\n\n  return {\n    type: raise$1,\n    event: event\n  };\n}\n\nfunction resolveRaise(action) {\n  return {\n    type: raise$1,\n    _event: toSCXMLEvent(action.event)\n  };\n}\n/**\r\n * Sends an event. This returns an action that will be read by an interpreter to\r\n * send the event in the next step, after the current step is finished executing.\r\n *\r\n * @param event The event to send.\r\n * @param options Options to pass into the send event:\r\n *  - `id` - The unique send event identifier (used with `cancel()`).\r\n *  - `delay` - The number of milliseconds to delay the sending of the event.\r\n *  - `to` - The target of this event (by default, the machine the event was sent from).\r\n */\n\n\nfunction send(event, options) {\n  return {\n    to: options ? options.to : undefined,\n    type: send$1,\n    event: isFunction(event) ? event : toEventObject(event),\n    delay: options ? options.delay : undefined,\n    id: options && options.id !== undefined ? options.id : isFunction(event) ? event.name : getEventType(event)\n  };\n}\n\nfunction resolveSend(action, ctx, _event, delaysMap) {\n  var meta = {\n    _event: _event\n  }; // TODO: helper function for resolving Expr\n\n  var resolvedEvent = toSCXMLEvent(isFunction(action.event) ? action.event(ctx, _event.data, meta) : action.event);\n  var resolvedDelay;\n\n  if (isString(action.delay)) {\n    var configDelay = delaysMap && delaysMap[action.delay];\n    resolvedDelay = isFunction(configDelay) ? configDelay(ctx, _event.data, meta) : configDelay;\n  } else {\n    resolvedDelay = isFunction(action.delay) ? action.delay(ctx, _event.data, meta) : action.delay;\n  }\n\n  var resolvedTarget = isFunction(action.to) ? action.to(ctx, _event.data, meta) : action.to;\n  return __assign(__assign({}, action), {\n    to: resolvedTarget,\n    _event: resolvedEvent,\n    event: resolvedEvent.data,\n    delay: resolvedDelay\n  });\n}\n/**\r\n * Sends an event to this machine's parent.\r\n *\r\n * @param event The event to send to the parent machine.\r\n * @param options Options to pass into the send event.\r\n */\n\n\nfunction sendParent(event, options) {\n  return send(event, __assign(__assign({}, options), {\n    to: SpecialTargets.Parent\n  }));\n}\n/**\r\n * Sends an update event to this machine's parent.\r\n */\n\n\nfunction sendUpdate() {\n  return sendParent(update);\n}\n/**\r\n * Sends an event back to the sender of the original event.\r\n *\r\n * @param event The event to send back to the sender\r\n * @param options Options to pass into the send event\r\n */\n\n\nfunction respond(event, options) {\n  return send(event, __assign(__assign({}, options), {\n    to: function (_, __, _a) {\n      var _event = _a._event;\n      return _event.origin; // TODO: handle when _event.origin is undefined\n    }\n  }));\n}\n\nvar defaultLogExpr = function (context, event) {\n  return {\n    context: context,\n    event: event\n  };\n};\n/**\r\n *\r\n * @param expr The expression function to evaluate which will be logged.\r\n *  Takes in 2 arguments:\r\n *  - `ctx` - the current state context\r\n *  - `event` - the event that caused this action to be executed.\r\n * @param label The label to give to the logged expression.\r\n */\n\n\nfunction log(expr, label) {\n  if (expr === void 0) {\n    expr = defaultLogExpr;\n  }\n\n  return {\n    type: log$1,\n    label: label,\n    expr: expr\n  };\n}\n\nvar resolveLog = function (action, ctx, _event) {\n  return __assign(__assign({}, action), {\n    value: isString(action.expr) ? action.expr : action.expr(ctx, _event.data, {\n      _event: _event\n    })\n  });\n};\n/**\r\n * Cancels an in-flight `send(...)` action. A canceled sent action will not\r\n * be executed, nor will its event be sent, unless it has already been sent\r\n * (e.g., if `cancel(...)` is called after the `send(...)` action's `delay`).\r\n *\r\n * @param sendId The `id` of the `send(...)` action to cancel.\r\n */\n\n\nvar cancel = function (sendId) {\n  return {\n    type: cancel$1,\n    sendId: sendId\n  };\n};\n/**\r\n * Starts an activity.\r\n *\r\n * @param activity The activity to start.\r\n */\n\n\nfunction start(activity) {\n  var activityDef = toActivityDefinition(activity);\n  return {\n    type: ActionTypes.Start,\n    activity: activityDef,\n    exec: undefined\n  };\n}\n/**\r\n * Stops an activity.\r\n *\r\n * @param activity The activity to stop.\r\n */\n\n\nfunction stop(activity) {\n  var activityDef = toActivityDefinition(activity);\n  return {\n    type: ActionTypes.Stop,\n    activity: activityDef,\n    exec: undefined\n  };\n}\n/**\r\n * Updates the current context of the machine.\r\n *\r\n * @param assignment An object that represents the partial context to update.\r\n */\n\n\nvar assign = function (assignment) {\n  return {\n    type: assign$1,\n    assignment: assignment\n  };\n};\n/**\r\n * Returns an event type that represents an implicit event that\r\n * is sent after the specified `delay`.\r\n *\r\n * @param delayRef The delay in milliseconds\r\n * @param id The state node ID where this event is handled\r\n */\n\n\nfunction after(delayRef, id) {\n  var idSuffix = id ? \"#\" + id : '';\n  return ActionTypes.After + \"(\" + delayRef + \")\" + idSuffix;\n}\n/**\r\n * Returns an event that represents that a final state node\r\n * has been reached in the parent state node.\r\n *\r\n * @param id The final state node's parent state node `id`\r\n * @param data The data to pass into the event\r\n */\n\n\nfunction done(id, data) {\n  var type = ActionTypes.DoneState + \".\" + id;\n  var eventObject = {\n    type: type,\n    data: data\n  };\n\n  eventObject.toString = function () {\n    return type;\n  };\n\n  return eventObject;\n}\n/**\r\n * Returns an event that represents that an invoked service has terminated.\r\n *\r\n * An invoked service is terminated when it has reached a top-level final state node,\r\n * but not when it is canceled.\r\n *\r\n * @param id The final state node ID\r\n * @param data The data to pass into the event\r\n */\n\n\nfunction doneInvoke(id, data) {\n  var type = ActionTypes.DoneInvoke + \".\" + id;\n  var eventObject = {\n    type: type,\n    data: data\n  };\n\n  eventObject.toString = function () {\n    return type;\n  };\n\n  return eventObject;\n}\n\nfunction error(id, data) {\n  var type = ActionTypes.ErrorPlatform + \".\" + id;\n  var eventObject = {\n    type: type,\n    data: data\n  };\n\n  eventObject.toString = function () {\n    return type;\n  };\n\n  return eventObject;\n}\n\nfunction pure(getActions) {\n  return {\n    type: ActionTypes.Pure,\n    get: getActions\n  };\n}\n/**\r\n * Forwards (sends) an event to a specified service.\r\n *\r\n * @param target The target service to forward the event to.\r\n * @param options Options to pass into the send action creator.\r\n */\n\n\nfunction forwardTo(target, options) {\n  return send(function (_, event) {\n    return event;\n  }, __assign(__assign({}, options), {\n    to: target\n  }));\n}\n/**\r\n * Escalates an error by sending it as an event to this machine's parent.\r\n *\r\n * @param errorData The error data to send, or the expression function that\r\n * takes in the `context`, `event`, and `meta`, and returns the error data to send.\r\n * @param options Options to pass into the send action creator.\r\n */\n\n\nfunction escalate(errorData, options) {\n  return sendParent(function (context, event, meta) {\n    return {\n      type: error$1,\n      data: isFunction(errorData) ? errorData(context, event, meta) : errorData\n    };\n  }, __assign(__assign({}, options), {\n    to: SpecialTargets.Parent\n  }));\n}\n\nfunction choose(conds) {\n  return {\n    type: ActionTypes.Choose,\n    conds: conds\n  };\n}\n\nfunction resolveActions(machine, currentState, currentContext, _event, actions) {\n  var _a = __read(partition(actions, function (action) {\n    return action.type === assign$1;\n  }), 2),\n      assignActions = _a[0],\n      otherActions = _a[1];\n\n  var updatedContext = assignActions.length ? updateContext(currentContext, _event, assignActions, currentState) : currentContext;\n  var resolvedActions = flatten(otherActions.map(function (actionObject) {\n    var _a;\n\n    switch (actionObject.type) {\n      case raise$1:\n        return resolveRaise(actionObject);\n\n      case send$1:\n        var sendAction = resolveSend(actionObject, updatedContext, _event, machine.options.delays); // TODO: fix ActionTypes.Init\n\n        if (!IS_PRODUCTION) {\n          // warn after resolving as we can create better contextual message here\n          warn(!isString(actionObject.delay) || typeof sendAction.delay === 'number', // tslint:disable-next-line:max-line-length\n          \"No delay reference for delay expression '\" + actionObject.delay + \"' was found on machine '\" + machine.id + \"'\");\n        }\n\n        return sendAction;\n\n      case log$1:\n        return resolveLog(actionObject, updatedContext, _event);\n\n      case choose$1:\n        {\n          var chooseAction = actionObject;\n          var matchedActions = (_a = chooseAction.conds.find(function (condition) {\n            var guard = toGuard(condition.cond, machine.options.guards);\n            return !guard || evaluateGuard(machine, guard, updatedContext, _event, currentState);\n          })) === null || _a === void 0 ? void 0 : _a.actions;\n\n          if (!matchedActions) {\n            return [];\n          }\n\n          var resolved = resolveActions(machine, currentState, updatedContext, _event, toActionObjects(toArray(matchedActions)));\n          updatedContext = resolved[1];\n          return resolved[0];\n        }\n\n      case pure$1:\n        {\n          var matchedActions = actionObject.get(updatedContext, _event.data);\n\n          if (!matchedActions) {\n            return [];\n          }\n\n          var resolved = resolveActions(machine, currentState, updatedContext, _event, toActionObjects(toArray(matchedActions)));\n          updatedContext = resolved[1];\n          return resolved[0];\n        }\n\n      default:\n        return toActionObject(actionObject, machine.options.actions);\n    }\n  }));\n  return [resolvedActions, updatedContext];\n}\n\nexport { after, assign, cancel, choose, done, doneInvoke, error, escalate, forwardTo, getActionFunction, initEvent, log, pure, raise, resolveActions, resolveLog, resolveRaise, resolveSend, respond, send, sendParent, sendUpdate, start, stop, toActionObject, toActionObjects, toActivityDefinition };","map":{"version":3,"sources":["/Users/nickbrinser/Desktop/xStateApp/x-state-proj/node_modules/xstate/es/actions.js"],"names":["__assign","__read","__rest","IS_PRODUCTION","toSCXMLEvent","isFunction","toEventObject","getEventType","isString","partition","updateContext","flatten","toArray","toGuard","evaluateGuard","warn","isArray","SpecialTargets","ActionTypes","send","send$1","update","assign","assign$1","init","raise","raise$1","log","log$1","cancel","cancel$1","error","error$1","pure","pure$1","choose","choose$1","initEvent","type","getActionFunction","actionType","actionFunctionMap","undefined","toActionObject","action","actionObject","exec","name","toString","other","Object","defineProperty","value","enumerable","configurable","toActionObjects","actions","map","subAction","toActivityDefinition","id","event","to","Internal","resolveRaise","_event","options","delay","resolveSend","ctx","delaysMap","meta","resolvedEvent","data","resolvedDelay","configDelay","resolvedTarget","sendParent","Parent","sendUpdate","respond","_","__","_a","origin","defaultLogExpr","context","expr","label","resolveLog","sendId","start","activity","activityDef","Start","stop","Stop","assignment","after","delayRef","idSuffix","After","done","DoneState","eventObject","doneInvoke","DoneInvoke","ErrorPlatform","getActions","Pure","get","forwardTo","target","escalate","errorData","conds","Choose","resolveActions","machine","currentState","currentContext","assignActions","otherActions","updatedContext","length","resolvedActions","sendAction","delays","chooseAction","matchedActions","find","condition","guard","cond","guards","resolved"],"mappings":"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","sourcesContent":["import { __assign, __read, __rest } from './_virtual/_tslib.js';\nimport { IS_PRODUCTION } from './environment.js';\nimport { toSCXMLEvent, isFunction, toEventObject, getEventType, isString, partition, updateContext, flatten, toArray, toGuard, evaluateGuard, warn, isArray } from './utils.js';\nimport { SpecialTargets, ActionTypes } from './types.js';\nimport { send as send$1, update, assign as assign$1, init, raise as raise$1, log as log$1, cancel as cancel$1, error as error$1, pure as pure$1, choose as choose$1 } from './actionTypes.js';\nvar initEvent = /*#__PURE__*/toSCXMLEvent({\n  type: init\n});\n\nfunction getActionFunction(actionType, actionFunctionMap) {\n  return actionFunctionMap ? actionFunctionMap[actionType] || undefined : undefined;\n}\n\nfunction toActionObject(action, actionFunctionMap) {\n  var actionObject;\n\n  if (isString(action) || typeof action === 'number') {\n    var exec = getActionFunction(action, actionFunctionMap);\n\n    if (isFunction(exec)) {\n      actionObject = {\n        type: action,\n        exec: exec\n      };\n    } else if (exec) {\n      actionObject = exec;\n    } else {\n      actionObject = {\n        type: action,\n        exec: undefined\n      };\n    }\n  } else if (isFunction(action)) {\n    actionObject = {\n      // Convert action to string if unnamed\n      type: action.name || action.toString(),\n      exec: action\n    };\n  } else {\n    var exec = getActionFunction(action.type, actionFunctionMap);\n\n    if (isFunction(exec)) {\n      actionObject = __assign(__assign({}, action), {\n        exec: exec\n      });\n    } else if (exec) {\n      var type = action.type,\n          other = __rest(action, [\"type\"]);\n\n      actionObject = __assign(__assign({\n        type: type\n      }, exec), other);\n    } else {\n      actionObject = action;\n    }\n  }\n\n  Object.defineProperty(actionObject, 'toString', {\n    value: function () {\n      return actionObject.type;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return actionObject;\n}\n\nvar toActionObjects = function (action, actionFunctionMap) {\n  if (!action) {\n    return [];\n  }\n\n  var actions = isArray(action) ? action : [action];\n  return actions.map(function (subAction) {\n    return toActionObject(subAction, actionFunctionMap);\n  });\n};\n\nfunction toActivityDefinition(action) {\n  var actionObject = toActionObject(action);\n  return __assign(__assign({\n    id: isString(action) ? action : actionObject.id\n  }, actionObject), {\n    type: actionObject.type\n  });\n}\n/**\r\n * Raises an event. This places the event in the internal event queue, so that\r\n * the event is immediately consumed by the machine in the current step.\r\n *\r\n * @param eventType The event to raise.\r\n */\n\n\nfunction raise(event) {\n  if (!isString(event)) {\n    return send(event, {\n      to: SpecialTargets.Internal\n    });\n  }\n\n  return {\n    type: raise$1,\n    event: event\n  };\n}\n\nfunction resolveRaise(action) {\n  return {\n    type: raise$1,\n    _event: toSCXMLEvent(action.event)\n  };\n}\n/**\r\n * Sends an event. This returns an action that will be read by an interpreter to\r\n * send the event in the next step, after the current step is finished executing.\r\n *\r\n * @param event The event to send.\r\n * @param options Options to pass into the send event:\r\n *  - `id` - The unique send event identifier (used with `cancel()`).\r\n *  - `delay` - The number of milliseconds to delay the sending of the event.\r\n *  - `to` - The target of this event (by default, the machine the event was sent from).\r\n */\n\n\nfunction send(event, options) {\n  return {\n    to: options ? options.to : undefined,\n    type: send$1,\n    event: isFunction(event) ? event : toEventObject(event),\n    delay: options ? options.delay : undefined,\n    id: options && options.id !== undefined ? options.id : isFunction(event) ? event.name : getEventType(event)\n  };\n}\n\nfunction resolveSend(action, ctx, _event, delaysMap) {\n  var meta = {\n    _event: _event\n  }; // TODO: helper function for resolving Expr\n\n  var resolvedEvent = toSCXMLEvent(isFunction(action.event) ? action.event(ctx, _event.data, meta) : action.event);\n  var resolvedDelay;\n\n  if (isString(action.delay)) {\n    var configDelay = delaysMap && delaysMap[action.delay];\n    resolvedDelay = isFunction(configDelay) ? configDelay(ctx, _event.data, meta) : configDelay;\n  } else {\n    resolvedDelay = isFunction(action.delay) ? action.delay(ctx, _event.data, meta) : action.delay;\n  }\n\n  var resolvedTarget = isFunction(action.to) ? action.to(ctx, _event.data, meta) : action.to;\n  return __assign(__assign({}, action), {\n    to: resolvedTarget,\n    _event: resolvedEvent,\n    event: resolvedEvent.data,\n    delay: resolvedDelay\n  });\n}\n/**\r\n * Sends an event to this machine's parent.\r\n *\r\n * @param event The event to send to the parent machine.\r\n * @param options Options to pass into the send event.\r\n */\n\n\nfunction sendParent(event, options) {\n  return send(event, __assign(__assign({}, options), {\n    to: SpecialTargets.Parent\n  }));\n}\n/**\r\n * Sends an update event to this machine's parent.\r\n */\n\n\nfunction sendUpdate() {\n  return sendParent(update);\n}\n/**\r\n * Sends an event back to the sender of the original event.\r\n *\r\n * @param event The event to send back to the sender\r\n * @param options Options to pass into the send event\r\n */\n\n\nfunction respond(event, options) {\n  return send(event, __assign(__assign({}, options), {\n    to: function (_, __, _a) {\n      var _event = _a._event;\n      return _event.origin; // TODO: handle when _event.origin is undefined\n    }\n  }));\n}\n\nvar defaultLogExpr = function (context, event) {\n  return {\n    context: context,\n    event: event\n  };\n};\n/**\r\n *\r\n * @param expr The expression function to evaluate which will be logged.\r\n *  Takes in 2 arguments:\r\n *  - `ctx` - the current state context\r\n *  - `event` - the event that caused this action to be executed.\r\n * @param label The label to give to the logged expression.\r\n */\n\n\nfunction log(expr, label) {\n  if (expr === void 0) {\n    expr = defaultLogExpr;\n  }\n\n  return {\n    type: log$1,\n    label: label,\n    expr: expr\n  };\n}\n\nvar resolveLog = function (action, ctx, _event) {\n  return __assign(__assign({}, action), {\n    value: isString(action.expr) ? action.expr : action.expr(ctx, _event.data, {\n      _event: _event\n    })\n  });\n};\n/**\r\n * Cancels an in-flight `send(...)` action. A canceled sent action will not\r\n * be executed, nor will its event be sent, unless it has already been sent\r\n * (e.g., if `cancel(...)` is called after the `send(...)` action's `delay`).\r\n *\r\n * @param sendId The `id` of the `send(...)` action to cancel.\r\n */\n\n\nvar cancel = function (sendId) {\n  return {\n    type: cancel$1,\n    sendId: sendId\n  };\n};\n/**\r\n * Starts an activity.\r\n *\r\n * @param activity The activity to start.\r\n */\n\n\nfunction start(activity) {\n  var activityDef = toActivityDefinition(activity);\n  return {\n    type: ActionTypes.Start,\n    activity: activityDef,\n    exec: undefined\n  };\n}\n/**\r\n * Stops an activity.\r\n *\r\n * @param activity The activity to stop.\r\n */\n\n\nfunction stop(activity) {\n  var activityDef = toActivityDefinition(activity);\n  return {\n    type: ActionTypes.Stop,\n    activity: activityDef,\n    exec: undefined\n  };\n}\n/**\r\n * Updates the current context of the machine.\r\n *\r\n * @param assignment An object that represents the partial context to update.\r\n */\n\n\nvar assign = function (assignment) {\n  return {\n    type: assign$1,\n    assignment: assignment\n  };\n};\n/**\r\n * Returns an event type that represents an implicit event that\r\n * is sent after the specified `delay`.\r\n *\r\n * @param delayRef The delay in milliseconds\r\n * @param id The state node ID where this event is handled\r\n */\n\n\nfunction after(delayRef, id) {\n  var idSuffix = id ? \"#\" + id : '';\n  return ActionTypes.After + \"(\" + delayRef + \")\" + idSuffix;\n}\n/**\r\n * Returns an event that represents that a final state node\r\n * has been reached in the parent state node.\r\n *\r\n * @param id The final state node's parent state node `id`\r\n * @param data The data to pass into the event\r\n */\n\n\nfunction done(id, data) {\n  var type = ActionTypes.DoneState + \".\" + id;\n  var eventObject = {\n    type: type,\n    data: data\n  };\n\n  eventObject.toString = function () {\n    return type;\n  };\n\n  return eventObject;\n}\n/**\r\n * Returns an event that represents that an invoked service has terminated.\r\n *\r\n * An invoked service is terminated when it has reached a top-level final state node,\r\n * but not when it is canceled.\r\n *\r\n * @param id The final state node ID\r\n * @param data The data to pass into the event\r\n */\n\n\nfunction doneInvoke(id, data) {\n  var type = ActionTypes.DoneInvoke + \".\" + id;\n  var eventObject = {\n    type: type,\n    data: data\n  };\n\n  eventObject.toString = function () {\n    return type;\n  };\n\n  return eventObject;\n}\n\nfunction error(id, data) {\n  var type = ActionTypes.ErrorPlatform + \".\" + id;\n  var eventObject = {\n    type: type,\n    data: data\n  };\n\n  eventObject.toString = function () {\n    return type;\n  };\n\n  return eventObject;\n}\n\nfunction pure(getActions) {\n  return {\n    type: ActionTypes.Pure,\n    get: getActions\n  };\n}\n/**\r\n * Forwards (sends) an event to a specified service.\r\n *\r\n * @param target The target service to forward the event to.\r\n * @param options Options to pass into the send action creator.\r\n */\n\n\nfunction forwardTo(target, options) {\n  return send(function (_, event) {\n    return event;\n  }, __assign(__assign({}, options), {\n    to: target\n  }));\n}\n/**\r\n * Escalates an error by sending it as an event to this machine's parent.\r\n *\r\n * @param errorData The error data to send, or the expression function that\r\n * takes in the `context`, `event`, and `meta`, and returns the error data to send.\r\n * @param options Options to pass into the send action creator.\r\n */\n\n\nfunction escalate(errorData, options) {\n  return sendParent(function (context, event, meta) {\n    return {\n      type: error$1,\n      data: isFunction(errorData) ? errorData(context, event, meta) : errorData\n    };\n  }, __assign(__assign({}, options), {\n    to: SpecialTargets.Parent\n  }));\n}\n\nfunction choose(conds) {\n  return {\n    type: ActionTypes.Choose,\n    conds: conds\n  };\n}\n\nfunction resolveActions(machine, currentState, currentContext, _event, actions) {\n  var _a = __read(partition(actions, function (action) {\n    return action.type === assign$1;\n  }), 2),\n      assignActions = _a[0],\n      otherActions = _a[1];\n\n  var updatedContext = assignActions.length ? updateContext(currentContext, _event, assignActions, currentState) : currentContext;\n  var resolvedActions = flatten(otherActions.map(function (actionObject) {\n    var _a;\n\n    switch (actionObject.type) {\n      case raise$1:\n        return resolveRaise(actionObject);\n\n      case send$1:\n        var sendAction = resolveSend(actionObject, updatedContext, _event, machine.options.delays); // TODO: fix ActionTypes.Init\n\n        if (!IS_PRODUCTION) {\n          // warn after resolving as we can create better contextual message here\n          warn(!isString(actionObject.delay) || typeof sendAction.delay === 'number', // tslint:disable-next-line:max-line-length\n          \"No delay reference for delay expression '\" + actionObject.delay + \"' was found on machine '\" + machine.id + \"'\");\n        }\n\n        return sendAction;\n\n      case log$1:\n        return resolveLog(actionObject, updatedContext, _event);\n\n      case choose$1:\n        {\n          var chooseAction = actionObject;\n          var matchedActions = (_a = chooseAction.conds.find(function (condition) {\n            var guard = toGuard(condition.cond, machine.options.guards);\n            return !guard || evaluateGuard(machine, guard, updatedContext, _event, currentState);\n          })) === null || _a === void 0 ? void 0 : _a.actions;\n\n          if (!matchedActions) {\n            return [];\n          }\n\n          var resolved = resolveActions(machine, currentState, updatedContext, _event, toActionObjects(toArray(matchedActions)));\n          updatedContext = resolved[1];\n          return resolved[0];\n        }\n\n      case pure$1:\n        {\n          var matchedActions = actionObject.get(updatedContext, _event.data);\n\n          if (!matchedActions) {\n            return [];\n          }\n\n          var resolved = resolveActions(machine, currentState, updatedContext, _event, toActionObjects(toArray(matchedActions)));\n          updatedContext = resolved[1];\n          return resolved[0];\n        }\n\n      default:\n        return toActionObject(actionObject, machine.options.actions);\n    }\n  }));\n  return [resolvedActions, updatedContext];\n}\n\nexport { after, assign, cancel, choose, done, doneInvoke, error, escalate, forwardTo, getActionFunction, initEvent, log, pure, raise, resolveActions, resolveLog, resolveRaise, resolveSend, respond, send, sendParent, sendUpdate, start, stop, toActionObject, toActionObjects, toActivityDefinition };"]},"metadata":{},"sourceType":"module"}