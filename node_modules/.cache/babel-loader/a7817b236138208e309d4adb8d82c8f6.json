{"ast":null,"code":"import { Machine, assign, spawn } from \"xstate\";\nimport { createSubredditMachine } from \"./subbredditMachine\";\nexport const redditMachine = Machine({\n  id: \"reddit\",\n  initial: \"idle\",\n  context: {\n    subreddit: null // none selected\n\n  },\n  states: {\n    idle: {},\n    selected: {}\n  },\n  on: {\n    SELECT: {\n      target: \".selected\",\n      actions: assign((context, event) => {\n        // use the existing subreddit actor if one doesn't exist\n        let subreddit = context.subreddits[event.name];\n\n        if (subreddit) {\n          return { ...context,\n            subreddit\n          };\n        } // otherwise, spawn a new subreddit actor and\n        // save it in the subreddits object\n\n\n        subreddit = spawn(createSubredditMachine(event.name));\n        return {\n          subreddits: { ...context.subreddits,\n            [event.name]: subreddit\n          },\n          subreddit\n        };\n      })\n    }\n  }\n});","map":{"version":3,"sources":["/Users/nickbrinser/Desktop/xStateApp/x-state-proj/src/redditMachine.js"],"names":["Machine","assign","spawn","createSubredditMachine","redditMachine","id","initial","context","subreddit","states","idle","selected","on","SELECT","target","actions","event","subreddits","name"],"mappings":"AAAA,SAASA,OAAT,EAAkBC,MAAlB,EAA0BC,KAA1B,QAAuC,QAAvC;AACA,SAASC,sBAAT,QAAuC,qBAAvC;AAEA,OAAO,MAAMC,aAAa,GAAGJ,OAAO,CAAC;AACnCK,EAAAA,EAAE,EAAE,QAD+B;AAEnCC,EAAAA,OAAO,EAAE,MAF0B;AAGnCC,EAAAA,OAAO,EAAE;AACPC,IAAAA,SAAS,EAAE,IADJ,CACU;;AADV,GAH0B;AAMnCC,EAAAA,MAAM,EAAE;AACNC,IAAAA,IAAI,EAAE,EADA;AAENC,IAAAA,QAAQ,EAAE;AAFJ,GAN2B;AAUnCC,EAAAA,EAAE,EAAE;AACFC,IAAAA,MAAM,EAAE;AACNC,MAAAA,MAAM,EAAE,WADF;AAENC,MAAAA,OAAO,EAAEd,MAAM,CAAC,CAACM,OAAD,EAAUS,KAAV,KAAoB;AAClC;AACA,YAAIR,SAAS,GAAGD,OAAO,CAACU,UAAR,CAAmBD,KAAK,CAACE,IAAzB,CAAhB;;AAEA,YAAIV,SAAJ,EAAe;AACb,iBAAO,EACL,GAAGD,OADE;AAELC,YAAAA;AAFK,WAAP;AAID,SATiC,CAWlC;AACA;;;AACAA,QAAAA,SAAS,GAAGN,KAAK,CAACC,sBAAsB,CAACa,KAAK,CAACE,IAAP,CAAvB,CAAjB;AAEA,eAAO;AACLD,UAAAA,UAAU,EAAE,EACV,GAAGV,OAAO,CAACU,UADD;AAEV,aAACD,KAAK,CAACE,IAAP,GAAcV;AAFJ,WADP;AAKLA,UAAAA;AALK,SAAP;AAOD,OAtBc;AAFT;AADN;AAV+B,CAAD,CAA7B","sourcesContent":["import { Machine, assign, spawn } from \"xstate\";\nimport { createSubredditMachine } from \"./subbredditMachine\";\n\nexport const redditMachine = Machine({\n  id: \"reddit\",\n  initial: \"idle\",\n  context: {\n    subreddit: null, // none selected\n  },\n  states: {\n    idle: {},\n    selected: {},\n  },\n  on: {\n    SELECT: {\n      target: \".selected\",\n      actions: assign((context, event) => {\n        // use the existing subreddit actor if one doesn't exist\n        let subreddit = context.subreddits[event.name];\n\n        if (subreddit) {\n          return {\n            ...context,\n            subreddit,\n          };\n        }\n\n        // otherwise, spawn a new subreddit actor and\n        // save it in the subreddits object\n        subreddit = spawn(createSubredditMachine(event.name));\n\n        return {\n          subreddits: {\n            ...context.subreddits,\n            [event.name]: subreddit,\n          },\n          subreddit,\n        };\n      }),\n    },\n  },\n});\n"]},"metadata":{},"sourceType":"module"}