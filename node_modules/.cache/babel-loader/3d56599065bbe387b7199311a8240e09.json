{"ast":null,"code":"import { Machine, assign } from \"xstate\";\n\nfunction invokeFetchSubreddit(context) {\n  const {\n    subreddit\n  } = context;\n  return fetch(`https://www.reddit.com/r/${subbreddit}.json`).then(response => response.json()).then(json => json.data.children.map(child => child.data));\n}\n\nexport const redditMachine = Machine({\n  id: \"reddit\",\n  initial: \"idle\",\n  context: {\n    subreddit: null // none selected\n\n  },\n  states: {\n    idle: {},\n    selected: {\n      initial: \"loading\",\n      states: {\n        loading: {\n          invoke: {\n            id: \"fetch-subreddit\",\n            src: invokeFetchSubreddit,\n            onDone: {\n              target: \"loaded\",\n              actions: assign({\n                posts: (constext, event) => event.data\n              })\n            },\n            onError: \"failed\"\n          }\n        },\n        loaded: {},\n        failed: {}\n      }\n    }\n  },\n  on: {\n    SELECT: {\n      target: \".selected\",\n      actions: assign({\n        subreddit: (context, event) => event.name\n      })\n    }\n  }\n}); // sample select event\n\nconst selectEvent = {\n  type: \"SELECT\",\n  // event type\n  name: \"reactjs\" //subreddit name\n\n};","map":{"version":3,"sources":["/Users/nickbrinser/Desktop/xStateApp/x-state-proj/src/redditMachine.js"],"names":["Machine","assign","invokeFetchSubreddit","context","subreddit","fetch","subbreddit","then","response","json","data","children","map","child","redditMachine","id","initial","states","idle","selected","loading","invoke","src","onDone","target","actions","posts","constext","event","onError","loaded","failed","on","SELECT","name","selectEvent","type"],"mappings":"AAAA,SAASA,OAAT,EAAkBC,MAAlB,QAAgC,QAAhC;;AAEA,SAASC,oBAAT,CAA8BC,OAA9B,EAAuC;AACrC,QAAM;AAAEC,IAAAA;AAAF,MAAgBD,OAAtB;AAEA,SAAOE,KAAK,CAAE,4BAA2BC,UAAW,OAAxC,CAAL,CACJC,IADI,CACEC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EADf,EAEJF,IAFI,CAEEE,IAAD,IAAUA,IAAI,CAACC,IAAL,CAAUC,QAAV,CAAmBC,GAAnB,CAAwBC,KAAD,IAAWA,KAAK,CAACH,IAAxC,CAFX,CAAP;AAGD;;AAED,OAAO,MAAMI,aAAa,GAAGd,OAAO,CAAC;AACnCe,EAAAA,EAAE,EAAE,QAD+B;AAEnCC,EAAAA,OAAO,EAAE,MAF0B;AAGnCb,EAAAA,OAAO,EAAE;AACPC,IAAAA,SAAS,EAAE,IADJ,CACU;;AADV,GAH0B;AAMnCa,EAAAA,MAAM,EAAE;AACNC,IAAAA,IAAI,EAAE,EADA;AAENC,IAAAA,QAAQ,EAAE;AACRH,MAAAA,OAAO,EAAE,SADD;AAERC,MAAAA,MAAM,EAAE;AACNG,QAAAA,OAAO,EAAE;AACPC,UAAAA,MAAM,EAAE;AACNN,YAAAA,EAAE,EAAE,iBADE;AAENO,YAAAA,GAAG,EAAEpB,oBAFC;AAGNqB,YAAAA,MAAM,EAAE;AACNC,cAAAA,MAAM,EAAE,QADF;AAENC,cAAAA,OAAO,EAAExB,MAAM,CAAC;AACdyB,gBAAAA,KAAK,EAAE,CAACC,QAAD,EAAWC,KAAX,KAAqBA,KAAK,CAAClB;AADpB,eAAD;AAFT,aAHF;AASNmB,YAAAA,OAAO,EAAE;AATH;AADD,SADH;AAcNC,QAAAA,MAAM,EAAE,EAdF;AAeNC,QAAAA,MAAM,EAAE;AAfF;AAFA;AAFJ,GAN2B;AA6BnCC,EAAAA,EAAE,EAAE;AACFC,IAAAA,MAAM,EAAE;AACNT,MAAAA,MAAM,EAAE,WADF;AAENC,MAAAA,OAAO,EAAExB,MAAM,CAAC;AACdG,QAAAA,SAAS,EAAE,CAACD,OAAD,EAAUyB,KAAV,KAAoBA,KAAK,CAACM;AADvB,OAAD;AAFT;AADN;AA7B+B,CAAD,CAA7B,C,CAuCP;;AACA,MAAMC,WAAW,GAAG;AAClBC,EAAAA,IAAI,EAAE,QADY;AACF;AAChBF,EAAAA,IAAI,EAAE,SAFY,CAED;;AAFC,CAApB","sourcesContent":["import { Machine, assign } from \"xstate\";\n\nfunction invokeFetchSubreddit(context) {\n  const { subreddit } = context;\n\n  return fetch(`https://www.reddit.com/r/${subbreddit}.json`)\n    .then((response) => response.json())\n    .then((json) => json.data.children.map((child) => child.data));\n}\n\nexport const redditMachine = Machine({\n  id: \"reddit\",\n  initial: \"idle\",\n  context: {\n    subreddit: null, // none selected\n  },\n  states: {\n    idle: {},\n    selected: {\n      initial: \"loading\",\n      states: {\n        loading: {\n          invoke: {\n            id: \"fetch-subreddit\",\n            src: invokeFetchSubreddit,\n            onDone: {\n              target: \"loaded\",\n              actions: assign({\n                posts: (constext, event) => event.data,\n              }),\n            },\n            onError: \"failed\",\n          },\n        },\n        loaded: {},\n        failed: {},\n      },\n    },\n  },\n  on: {\n    SELECT: {\n      target: \".selected\",\n      actions: assign({\n        subreddit: (context, event) => event.name,\n      }),\n    },\n  },\n});\n\n// sample select event\nconst selectEvent = {\n  type: \"SELECT\", // event type\n  name: \"reactjs\", //subreddit name\n};\n"]},"metadata":{},"sourceType":"module"}