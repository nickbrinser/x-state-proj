{"ast":null,"code":"import { __assign, __values, __spread, __read, __rest } from './_virtual/_tslib.js';\nimport { STATE_DELIMITER } from './constants.js';\nimport { IS_PRODUCTION } from './environment.js';\nimport { mapValues, isArray, flatten, keys, toArray, toStateValue, isString, getEventType, matchesState, path, evaluateGuard, mapContext, toSCXMLEvent, pathToStateValue, isBuiltInEvent, partition, updateHistoryValue, toStatePath, mapFilterValues, warn, toStatePaths, nestedPath, normalizeTarget, toGuard, toTransitionConfigArray, isMachine, isFunction } from './utils.js';\nimport { SpecialTargets } from './types.js';\nimport { getAllStateNodes, getConfiguration, has, getChildren, isInFinalState, getValue, isLeafNode } from './stateUtils.js';\nimport { start as start$1, stop as stop$1, invoke, update, nullEvent, raise as raise$1, send as send$1 } from './actionTypes.js';\nimport { done, start, raise, stop, toActionObjects, resolveActions, doneInvoke, error, toActionObject, toActivityDefinition, after, send, cancel, initEvent } from './actions.js';\nimport { State, stateValuesEqual } from './State.js';\nimport { createInvocableActor } from './Actor.js';\nvar NULL_EVENT = '';\nvar STATE_IDENTIFIER = '#';\nvar WILDCARD = '*';\nvar EMPTY_OBJECT = {};\n\nvar isStateId = function (str) {\n  return str[0] === STATE_IDENTIFIER;\n};\n\nvar createDefaultOptions = function () {\n  return {\n    actions: {},\n    guards: {},\n    services: {},\n    activities: {},\n    delays: {}\n  };\n};\n\nvar validateArrayifiedTransitions = function (stateNode, event, transitions) {\n  var hasNonLastUnguardedTarget = transitions.slice(0, -1).some(function (transition) {\n    return !('cond' in transition) && !('in' in transition) && (isString(transition.target) || isMachine(transition.target));\n  });\n  var eventText = event === NULL_EVENT ? 'the transient event' : \"event '\" + event + \"'\";\n  warn(!hasNonLastUnguardedTarget, \"One or more transitions for \" + eventText + \" on state '\" + stateNode.id + \"' are unreachable. \" + \"Make sure that the default transition is the last one defined.\");\n};\n\nvar StateNode =\n/*#__PURE__*/\n\n/** @class */\nfunction () {\n  function StateNode(\n  /**\r\n   * The raw config used to create the machine.\r\n   */\n  config, options,\n  /**\r\n   * The initial extended state\r\n   */\n  context) {\n    var _this = this;\n\n    this.config = config;\n    this.context = context;\n    /**\r\n     * The order this state node appears. Corresponds to the implicit SCXML document order.\r\n     */\n\n    this.order = -1;\n    this.__xstatenode = true;\n    this.__cache = {\n      events: undefined,\n      relativeValue: new Map(),\n      initialStateValue: undefined,\n      initialState: undefined,\n      on: undefined,\n      transitions: undefined,\n      candidates: {},\n      delayedTransitions: undefined\n    };\n    this.idMap = {};\n    this.options = Object.assign(createDefaultOptions(), options);\n    this.parent = this.options._parent;\n    this.key = this.config.key || this.options._key || this.config.id || '(machine)';\n    this.machine = this.parent ? this.parent.machine : this;\n    this.path = this.parent ? this.parent.path.concat(this.key) : [];\n    this.delimiter = this.config.delimiter || (this.parent ? this.parent.delimiter : STATE_DELIMITER);\n    this.id = this.config.id || __spread([this.machine.key], this.path).join(this.delimiter);\n    this.version = this.parent ? this.parent.version : this.config.version;\n    this.type = this.config.type || (this.config.parallel ? 'parallel' : this.config.states && keys(this.config.states).length ? 'compound' : this.config.history ? 'history' : 'atomic');\n\n    if (!IS_PRODUCTION) {\n      warn(!('parallel' in this.config), \"The \\\"parallel\\\" property is deprecated and will be removed in version 4.1. \" + (this.config.parallel ? \"Replace with `type: 'parallel'`\" : \"Use `type: '\" + this.type + \"'`\") + \" in the config for state node '\" + this.id + \"' instead.\");\n    }\n\n    this.initial = this.config.initial;\n    this.states = this.config.states ? mapValues(this.config.states, function (stateConfig, key) {\n      var _a;\n\n      var stateNode = new StateNode(stateConfig, {\n        _parent: _this,\n        _key: key\n      });\n      Object.assign(_this.idMap, __assign((_a = {}, _a[stateNode.id] = stateNode, _a), stateNode.idMap));\n      return stateNode;\n    }) : EMPTY_OBJECT; // Document order\n\n    var order = 0;\n\n    function dfs(stateNode) {\n      var e_1, _a;\n\n      stateNode.order = order++;\n\n      try {\n        for (var _b = __values(getChildren(stateNode)), _c = _b.next(); !_c.done; _c = _b.next()) {\n          var child = _c.value;\n          dfs(child);\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n    }\n\n    dfs(this); // History config\n\n    this.history = this.config.history === true ? 'shallow' : this.config.history || false;\n    this._transient = !this.config.on ? false : Array.isArray(this.config.on) ? this.config.on.some(function (_a) {\n      var event = _a.event;\n      return event === NULL_EVENT;\n    }) : NULL_EVENT in this.config.on;\n    this.strict = !!this.config.strict; // TODO: deprecate (entry)\n\n    this.onEntry = toArray(this.config.entry || this.config.onEntry).map(function (action) {\n      return toActionObject(action);\n    }); // TODO: deprecate (exit)\n\n    this.onExit = toArray(this.config.exit || this.config.onExit).map(function (action) {\n      return toActionObject(action);\n    });\n    this.meta = this.config.meta;\n    this.data = this.type === 'final' ? this.config.data : undefined;\n    this.invoke = toArray(this.config.invoke).map(function (invokeConfig, i) {\n      var _a, _b;\n\n      if (isMachine(invokeConfig)) {\n        _this.machine.options.services = __assign((_a = {}, _a[invokeConfig.id] = invokeConfig, _a), _this.machine.options.services);\n        return {\n          type: invoke,\n          src: invokeConfig.id,\n          id: invokeConfig.id\n        };\n      } else if (typeof invokeConfig.src !== 'string') {\n        var invokeSrc = _this.id + \":invocation[\" + i + \"]\"; // TODO: util function\n\n        _this.machine.options.services = __assign((_b = {}, _b[invokeSrc] = invokeConfig.src, _b), _this.machine.options.services);\n        return __assign(__assign({\n          type: invoke,\n          id: invokeSrc\n        }, invokeConfig), {\n          src: invokeSrc\n        });\n      } else {\n        return __assign(__assign({}, invokeConfig), {\n          type: invoke,\n          id: invokeConfig.id || invokeConfig.src,\n          src: invokeConfig.src\n        });\n      }\n    });\n    this.activities = toArray(this.config.activities).concat(this.invoke).map(function (activity) {\n      return toActivityDefinition(activity);\n    });\n    this.transition = this.transition.bind(this);\n  }\n\n  StateNode.prototype._init = function () {\n    if (this.__cache.transitions) {\n      return;\n    }\n\n    getAllStateNodes(this).forEach(function (stateNode) {\n      return stateNode.on;\n    });\n  };\n  /**\r\n   * Clones this state machine with custom options and context.\r\n   *\r\n   * @param options Options (actions, guards, activities, services) to recursively merge with the existing options.\r\n   * @param context Custom context (will override predefined context)\r\n   */\n\n\n  StateNode.prototype.withConfig = function (options, context) {\n    if (context === void 0) {\n      context = this.context;\n    }\n\n    var _a = this.options,\n        actions = _a.actions,\n        activities = _a.activities,\n        guards = _a.guards,\n        services = _a.services,\n        delays = _a.delays;\n    return new StateNode(this.config, {\n      actions: __assign(__assign({}, actions), options.actions),\n      activities: __assign(__assign({}, activities), options.activities),\n      guards: __assign(__assign({}, guards), options.guards),\n      services: __assign(__assign({}, services), options.services),\n      delays: __assign(__assign({}, delays), options.delays)\n    }, context);\n  };\n  /**\r\n   * Clones this state machine with custom context.\r\n   *\r\n   * @param context Custom context (will override predefined context, not recursive)\r\n   */\n\n\n  StateNode.prototype.withContext = function (context) {\n    return new StateNode(this.config, this.options, context);\n  };\n\n  Object.defineProperty(StateNode.prototype, \"definition\", {\n    /**\r\n     * The well-structured state node definition.\r\n     */\n    get: function () {\n      return {\n        id: this.id,\n        key: this.key,\n        version: this.version,\n        context: this.context,\n        type: this.type,\n        initial: this.initial,\n        history: this.history,\n        states: mapValues(this.states, function (state) {\n          return state.definition;\n        }),\n        on: this.on,\n        transitions: this.transitions,\n        entry: this.onEntry,\n        exit: this.onExit,\n        activities: this.activities || [],\n        meta: this.meta,\n        order: this.order || -1,\n        data: this.data,\n        invoke: this.invoke\n      };\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  StateNode.prototype.toJSON = function () {\n    return this.definition;\n  };\n\n  Object.defineProperty(StateNode.prototype, \"on\", {\n    /**\r\n     * The mapping of events to transitions.\r\n     */\n    get: function () {\n      if (this.__cache.on) {\n        return this.__cache.on;\n      }\n\n      var transitions = this.transitions;\n      return this.__cache.on = transitions.reduce(function (map, transition) {\n        map[transition.eventType] = map[transition.eventType] || [];\n        map[transition.eventType].push(transition);\n        return map;\n      }, {});\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(StateNode.prototype, \"after\", {\n    get: function () {\n      return this.__cache.delayedTransitions || (this.__cache.delayedTransitions = this.getDelayedTransitions(), this.__cache.delayedTransitions);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(StateNode.prototype, \"transitions\", {\n    /**\r\n     * All the transitions that can be taken from this state node.\r\n     */\n    get: function () {\n      return this.__cache.transitions || (this.__cache.transitions = this.formatTransitions(), this.__cache.transitions);\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  StateNode.prototype.getCandidates = function (eventName) {\n    if (this.__cache.candidates[eventName]) {\n      return this.__cache.candidates[eventName];\n    }\n\n    var transient = eventName === NULL_EVENT;\n    var candidates = this.transitions.filter(function (transition) {\n      var sameEventType = transition.eventType === eventName; // null events should only match against eventless transitions\n\n      return transient ? sameEventType : sameEventType || transition.eventType === WILDCARD;\n    });\n    this.__cache.candidates[eventName] = candidates;\n    return candidates;\n  };\n  /**\r\n   * All delayed transitions from the config.\r\n   */\n\n\n  StateNode.prototype.getDelayedTransitions = function () {\n    var _this = this;\n\n    var afterConfig = this.config.after;\n\n    if (!afterConfig) {\n      return [];\n    }\n\n    var mutateEntryExit = function (delay, i) {\n      var delayRef = isFunction(delay) ? _this.id + \":delay[\" + i + \"]\" : delay;\n      var eventType = after(delayRef, _this.id);\n\n      _this.onEntry.push(send(eventType, {\n        delay: delay\n      }));\n\n      _this.onExit.push(cancel(eventType));\n\n      return eventType;\n    };\n\n    var delayedTransitions = isArray(afterConfig) ? afterConfig.map(function (transition, i) {\n      var eventType = mutateEntryExit(transition.delay, i);\n      return __assign(__assign({}, transition), {\n        event: eventType\n      });\n    }) : flatten(keys(afterConfig).map(function (delay, i) {\n      var configTransition = afterConfig[delay];\n      var resolvedTransition = isString(configTransition) ? {\n        target: configTransition\n      } : configTransition;\n      var resolvedDelay = !isNaN(+delay) ? +delay : delay;\n      var eventType = mutateEntryExit(resolvedDelay, i);\n      return toArray(resolvedTransition).map(function (transition) {\n        return __assign(__assign({}, transition), {\n          event: eventType,\n          delay: resolvedDelay\n        });\n      });\n    }));\n    return delayedTransitions.map(function (delayedTransition) {\n      var delay = delayedTransition.delay;\n      return __assign(__assign({}, _this.formatTransition(delayedTransition)), {\n        delay: delay\n      });\n    });\n  };\n  /**\r\n   * Returns the state nodes represented by the current state value.\r\n   *\r\n   * @param state The state value or State instance\r\n   */\n\n\n  StateNode.prototype.getStateNodes = function (state) {\n    var _a;\n\n    var _this = this;\n\n    if (!state) {\n      return [];\n    }\n\n    var stateValue = state instanceof State ? state.value : toStateValue(state, this.delimiter);\n\n    if (isString(stateValue)) {\n      var initialStateValue = this.getStateNode(stateValue).initial;\n      return initialStateValue !== undefined ? this.getStateNodes((_a = {}, _a[stateValue] = initialStateValue, _a)) : [this.states[stateValue]];\n    }\n\n    var subStateKeys = keys(stateValue);\n    var subStateNodes = subStateKeys.map(function (subStateKey) {\n      return _this.getStateNode(subStateKey);\n    });\n    return subStateNodes.concat(subStateKeys.reduce(function (allSubStateNodes, subStateKey) {\n      var subStateNode = _this.getStateNode(subStateKey).getStateNodes(stateValue[subStateKey]);\n\n      return allSubStateNodes.concat(subStateNode);\n    }, []));\n  };\n  /**\r\n   * Returns `true` if this state node explicitly handles the given event.\r\n   *\r\n   * @param event The event in question\r\n   */\n\n\n  StateNode.prototype.handles = function (event) {\n    var eventType = getEventType(event);\n    return this.events.includes(eventType);\n  };\n  /**\r\n   * Resolves the given `state` to a new `State` instance relative to this machine.\r\n   *\r\n   * This ensures that `.events` and `.nextEvents` represent the correct values.\r\n   *\r\n   * @param state The state to resolve\r\n   */\n\n\n  StateNode.prototype.resolveState = function (state) {\n    var configuration = Array.from(getConfiguration([], this.getStateNodes(state.value)));\n    return new State(__assign(__assign({}, state), {\n      value: this.resolve(state.value),\n      configuration: configuration\n    }));\n  };\n\n  StateNode.prototype.transitionLeafNode = function (stateValue, state, _event) {\n    var stateNode = this.getStateNode(stateValue);\n    var next = stateNode.next(state, _event);\n\n    if (!next || !next.transitions.length) {\n      return this.next(state, _event);\n    }\n\n    return next;\n  };\n\n  StateNode.prototype.transitionCompoundNode = function (stateValue, state, _event) {\n    var subStateKeys = keys(stateValue);\n    var stateNode = this.getStateNode(subStateKeys[0]);\n\n    var next = stateNode._transition(stateValue[subStateKeys[0]], state, _event);\n\n    if (!next || !next.transitions.length) {\n      return this.next(state, _event);\n    }\n\n    return next;\n  };\n\n  StateNode.prototype.transitionParallelNode = function (stateValue, state, _event) {\n    var e_2, _a;\n\n    var transitionMap = {};\n\n    try {\n      for (var _b = __values(keys(stateValue)), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var subStateKey = _c.value;\n        var subStateValue = stateValue[subStateKey];\n\n        if (!subStateValue) {\n          continue;\n        }\n\n        var subStateNode = this.getStateNode(subStateKey);\n\n        var next = subStateNode._transition(subStateValue, state, _event);\n\n        if (next) {\n          transitionMap[subStateKey] = next;\n        }\n      }\n    } catch (e_2_1) {\n      e_2 = {\n        error: e_2_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_2) throw e_2.error;\n      }\n    }\n\n    var stateTransitions = keys(transitionMap).map(function (key) {\n      return transitionMap[key];\n    });\n    var enabledTransitions = flatten(stateTransitions.map(function (st) {\n      return st.transitions;\n    }));\n    var willTransition = stateTransitions.some(function (st) {\n      return st.transitions.length > 0;\n    });\n\n    if (!willTransition) {\n      return this.next(state, _event);\n    }\n\n    var entryNodes = flatten(stateTransitions.map(function (t) {\n      return t.entrySet;\n    }));\n    var configuration = flatten(keys(transitionMap).map(function (key) {\n      return transitionMap[key].configuration;\n    }));\n    return {\n      transitions: enabledTransitions,\n      entrySet: entryNodes,\n      exitSet: flatten(stateTransitions.map(function (t) {\n        return t.exitSet;\n      })),\n      configuration: configuration,\n      source: state,\n      actions: flatten(keys(transitionMap).map(function (key) {\n        return transitionMap[key].actions;\n      }))\n    };\n  };\n\n  StateNode.prototype._transition = function (stateValue, state, _event) {\n    // leaf node\n    if (isString(stateValue)) {\n      return this.transitionLeafNode(stateValue, state, _event);\n    } // hierarchical node\n\n\n    if (keys(stateValue).length === 1) {\n      return this.transitionCompoundNode(stateValue, state, _event);\n    } // orthogonal node\n\n\n    return this.transitionParallelNode(stateValue, state, _event);\n  };\n\n  StateNode.prototype.next = function (state, _event) {\n    var e_3, _a;\n\n    var _this = this;\n\n    var eventName = _event.name;\n    var actions = [];\n    var nextStateNodes = [];\n    var selectedTransition;\n\n    try {\n      for (var _b = __values(this.getCandidates(eventName)), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var candidate = _c.value;\n        var cond = candidate.cond,\n            stateIn = candidate.in;\n        var resolvedContext = state.context;\n        var isInState = stateIn ? isString(stateIn) && isStateId(stateIn) ? // Check if in state by ID\n        state.matches(toStateValue(this.getStateNodeById(stateIn).path, this.delimiter)) : // Check if in state by relative grandparent\n        matchesState(toStateValue(stateIn, this.delimiter), path(this.path.slice(0, -2))(state.value)) : true;\n        var guardPassed = false;\n\n        try {\n          guardPassed = !cond || evaluateGuard(this.machine, cond, resolvedContext, _event, state);\n        } catch (err) {\n          throw new Error(\"Unable to evaluate guard '\" + (cond.name || cond.type) + \"' in transition for event '\" + eventName + \"' in state node '\" + this.id + \"':\\n\" + err.message);\n        }\n\n        if (guardPassed && isInState) {\n          if (candidate.target !== undefined) {\n            nextStateNodes = candidate.target;\n          }\n\n          actions.push.apply(actions, __spread(candidate.actions));\n          selectedTransition = candidate;\n          break;\n        }\n      }\n    } catch (e_3_1) {\n      e_3 = {\n        error: e_3_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_3) throw e_3.error;\n      }\n    }\n\n    if (!selectedTransition) {\n      return undefined;\n    }\n\n    if (!nextStateNodes.length) {\n      return {\n        transitions: [selectedTransition],\n        entrySet: [],\n        exitSet: [],\n        configuration: state.value ? [this] : [],\n        source: state,\n        actions: actions\n      };\n    }\n\n    var allNextStateNodes = flatten(nextStateNodes.map(function (stateNode) {\n      return _this.getRelativeStateNodes(stateNode, state.historyValue);\n    }));\n    var isInternal = !!selectedTransition.internal;\n    var reentryNodes = isInternal ? [] : flatten(allNextStateNodes.map(function (n) {\n      return _this.nodesFromChild(n);\n    }));\n    return {\n      transitions: [selectedTransition],\n      entrySet: reentryNodes,\n      exitSet: isInternal ? [] : [this],\n      configuration: allNextStateNodes,\n      source: state,\n      actions: actions\n    };\n  };\n\n  StateNode.prototype.nodesFromChild = function (childStateNode) {\n    if (childStateNode.escapes(this)) {\n      return [];\n    }\n\n    var nodes = [];\n    var marker = childStateNode;\n\n    while (marker && marker !== this) {\n      nodes.push(marker);\n      marker = marker.parent;\n    }\n\n    nodes.push(this); // inclusive\n\n    return nodes;\n  };\n  /**\r\n   * Whether the given state node \"escapes\" this state node. If the `stateNode` is equal to or the parent of\r\n   * this state node, it does not escape.\r\n   */\n\n\n  StateNode.prototype.escapes = function (stateNode) {\n    if (this === stateNode) {\n      return false;\n    }\n\n    var parent = this.parent;\n\n    while (parent) {\n      if (parent === stateNode) {\n        return false;\n      }\n\n      parent = parent.parent;\n    }\n\n    return true;\n  };\n\n  StateNode.prototype.getActions = function (transition, currentContext, _event, prevState) {\n    var e_4, _a, e_5, _b;\n\n    var prevConfig = getConfiguration([], prevState ? this.getStateNodes(prevState.value) : [this]);\n    var resolvedConfig = transition.configuration.length ? getConfiguration(prevConfig, transition.configuration) : prevConfig;\n\n    try {\n      for (var resolvedConfig_1 = __values(resolvedConfig), resolvedConfig_1_1 = resolvedConfig_1.next(); !resolvedConfig_1_1.done; resolvedConfig_1_1 = resolvedConfig_1.next()) {\n        var sn = resolvedConfig_1_1.value;\n\n        if (!has(prevConfig, sn)) {\n          transition.entrySet.push(sn);\n        }\n      }\n    } catch (e_4_1) {\n      e_4 = {\n        error: e_4_1\n      };\n    } finally {\n      try {\n        if (resolvedConfig_1_1 && !resolvedConfig_1_1.done && (_a = resolvedConfig_1.return)) _a.call(resolvedConfig_1);\n      } finally {\n        if (e_4) throw e_4.error;\n      }\n    }\n\n    try {\n      for (var prevConfig_1 = __values(prevConfig), prevConfig_1_1 = prevConfig_1.next(); !prevConfig_1_1.done; prevConfig_1_1 = prevConfig_1.next()) {\n        var sn = prevConfig_1_1.value;\n\n        if (!has(resolvedConfig, sn) || has(transition.exitSet, sn.parent)) {\n          transition.exitSet.push(sn);\n        }\n      }\n    } catch (e_5_1) {\n      e_5 = {\n        error: e_5_1\n      };\n    } finally {\n      try {\n        if (prevConfig_1_1 && !prevConfig_1_1.done && (_b = prevConfig_1.return)) _b.call(prevConfig_1);\n      } finally {\n        if (e_5) throw e_5.error;\n      }\n    }\n\n    if (!transition.source) {\n      transition.exitSet = []; // Ensure that root StateNode (machine) is entered\n\n      transition.entrySet.push(this);\n    }\n\n    var doneEvents = flatten(transition.entrySet.map(function (sn) {\n      var events = [];\n\n      if (sn.type !== 'final') {\n        return events;\n      }\n\n      var parent = sn.parent;\n\n      if (!parent.parent) {\n        return events;\n      }\n\n      events.push(done(sn.id, sn.data), // TODO: deprecate - final states should not emit done events for their own state.\n      done(parent.id, sn.data ? mapContext(sn.data, currentContext, _event) : undefined));\n      var grandparent = parent.parent;\n\n      if (grandparent.type === 'parallel') {\n        if (getChildren(grandparent).every(function (parentNode) {\n          return isInFinalState(transition.configuration, parentNode);\n        })) {\n          events.push(done(grandparent.id, grandparent.data));\n        }\n      }\n\n      return events;\n    }));\n    transition.exitSet.sort(function (a, b) {\n      return b.order - a.order;\n    });\n    transition.entrySet.sort(function (a, b) {\n      return a.order - b.order;\n    });\n    var entryStates = new Set(transition.entrySet);\n    var exitStates = new Set(transition.exitSet);\n\n    var _c = __read([flatten(Array.from(entryStates).map(function (stateNode) {\n      return __spread(stateNode.activities.map(function (activity) {\n        return start(activity);\n      }), stateNode.onEntry);\n    })).concat(doneEvents.map(raise)), flatten(Array.from(exitStates).map(function (stateNode) {\n      return __spread(stateNode.onExit, stateNode.activities.map(function (activity) {\n        return stop(activity);\n      }));\n    }))], 2),\n        entryActions = _c[0],\n        exitActions = _c[1];\n\n    var actions = toActionObjects(exitActions.concat(transition.actions).concat(entryActions), this.machine.options.actions);\n    return actions;\n  };\n  /**\r\n   * Determines the next state given the current `state` and sent `event`.\r\n   *\r\n   * @param state The current State instance or state value\r\n   * @param event The event that was sent at the current state\r\n   * @param context The current context (extended state) of the current state\r\n   */\n\n\n  StateNode.prototype.transition = function (state, event, context) {\n    if (state === void 0) {\n      state = this.initialState;\n    }\n\n    var _event = toSCXMLEvent(event);\n\n    var currentState;\n\n    if (state instanceof State) {\n      currentState = context === undefined ? state : this.resolveState(State.from(state, context));\n    } else {\n      var resolvedStateValue = isString(state) ? this.resolve(pathToStateValue(this.getResolvedPath(state))) : this.resolve(state);\n      var resolvedContext = context ? context : this.machine.context;\n      currentState = this.resolveState(State.from(resolvedStateValue, resolvedContext));\n    }\n\n    if (!IS_PRODUCTION && _event.name === WILDCARD) {\n      throw new Error(\"An event cannot have the wildcard type ('\" + WILDCARD + \"')\");\n    }\n\n    if (this.strict) {\n      if (!this.events.includes(_event.name) && !isBuiltInEvent(_event.name)) {\n        throw new Error(\"Machine '\" + this.id + \"' does not accept event '\" + _event.name + \"'\");\n      }\n    }\n\n    var stateTransition = this._transition(currentState.value, currentState, _event) || {\n      transitions: [],\n      configuration: [],\n      entrySet: [],\n      exitSet: [],\n      source: currentState,\n      actions: []\n    };\n    var prevConfig = getConfiguration([], this.getStateNodes(currentState.value));\n    var resolvedConfig = stateTransition.configuration.length ? getConfiguration(prevConfig, stateTransition.configuration) : prevConfig;\n    stateTransition.configuration = __spread(resolvedConfig);\n    return this.resolveTransition(stateTransition, currentState, _event);\n  };\n\n  StateNode.prototype.resolveRaisedTransition = function (state, _event, originalEvent) {\n    var _a;\n\n    var currentActions = state.actions;\n    state = this.transition(state, _event); // Save original event to state\n\n    state._event = originalEvent;\n    state.event = originalEvent.data;\n\n    (_a = state.actions).unshift.apply(_a, __spread(currentActions));\n\n    return state;\n  };\n\n  StateNode.prototype.resolveTransition = function (stateTransition, currentState, _event, context) {\n    var e_6, _a;\n\n    if (_event === void 0) {\n      _event = initEvent;\n    }\n\n    if (context === void 0) {\n      context = this.machine.context;\n    }\n\n    var configuration = stateTransition.configuration; // Transition will \"apply\" if:\n    // - this is the initial state (there is no current state)\n    // - OR there are transitions\n\n    var willTransition = !currentState || stateTransition.transitions.length > 0;\n    var resolvedStateValue = willTransition ? getValue(this.machine, configuration) : undefined;\n    var historyValue = currentState ? currentState.historyValue ? currentState.historyValue : stateTransition.source ? this.machine.historyValue(currentState.value) : undefined : undefined;\n    var currentContext = currentState ? currentState.context : context;\n    var actions = this.getActions(stateTransition, currentContext, _event, currentState);\n    var activities = currentState ? __assign({}, currentState.activities) : {};\n\n    try {\n      for (var actions_1 = __values(actions), actions_1_1 = actions_1.next(); !actions_1_1.done; actions_1_1 = actions_1.next()) {\n        var action = actions_1_1.value;\n\n        if (action.type === start$1) {\n          activities[action.activity.type] = action;\n        } else if (action.type === stop$1) {\n          activities[action.activity.type] = false;\n        }\n      }\n    } catch (e_6_1) {\n      e_6 = {\n        error: e_6_1\n      };\n    } finally {\n      try {\n        if (actions_1_1 && !actions_1_1.done && (_a = actions_1.return)) _a.call(actions_1);\n      } finally {\n        if (e_6) throw e_6.error;\n      }\n    }\n\n    var _b = __read(resolveActions(this, currentState, currentContext, _event, actions), 2),\n        resolvedActions = _b[0],\n        updatedContext = _b[1];\n\n    var _c = __read(partition(resolvedActions, function (action) {\n      return action.type === raise$1 || action.type === send$1 && action.to === SpecialTargets.Internal;\n    }), 2),\n        raisedEvents = _c[0],\n        nonRaisedActions = _c[1];\n\n    var invokeActions = resolvedActions.filter(function (action) {\n      return action.type === start$1 && action.activity.type === invoke;\n    });\n    var children = invokeActions.reduce(function (acc, action) {\n      acc[action.activity.id] = createInvocableActor(action.activity);\n      return acc;\n    }, currentState ? __assign({}, currentState.children) : {});\n    var resolvedConfiguration = resolvedStateValue ? stateTransition.configuration : currentState ? currentState.configuration : [];\n    var meta = resolvedConfiguration.reduce(function (acc, stateNode) {\n      if (stateNode.meta !== undefined) {\n        acc[stateNode.id] = stateNode.meta;\n      }\n\n      return acc;\n    }, {});\n    var isDone = isInFinalState(resolvedConfiguration, this);\n    var nextState = new State({\n      value: resolvedStateValue || currentState.value,\n      context: updatedContext,\n      _event: _event,\n      // Persist _sessionid between states\n      _sessionid: currentState ? currentState._sessionid : null,\n      historyValue: resolvedStateValue ? historyValue ? updateHistoryValue(historyValue, resolvedStateValue) : undefined : currentState ? currentState.historyValue : undefined,\n      history: !resolvedStateValue || stateTransition.source ? currentState : undefined,\n      actions: resolvedStateValue ? nonRaisedActions : [],\n      activities: resolvedStateValue ? activities : currentState ? currentState.activities : {},\n      meta: resolvedStateValue ? meta : currentState ? currentState.meta : undefined,\n      events: [],\n      configuration: resolvedConfiguration,\n      transitions: stateTransition.transitions,\n      children: children,\n      done: isDone\n    });\n    var didUpdateContext = currentContext !== updatedContext;\n    nextState.changed = _event.name === update || didUpdateContext; // Dispose of penultimate histories to prevent memory leaks\n\n    var history = nextState.history;\n\n    if (history) {\n      delete history.history;\n    }\n\n    if (!resolvedStateValue) {\n      return nextState;\n    }\n\n    var maybeNextState = nextState;\n\n    if (!isDone) {\n      var isTransient = this._transient || configuration.some(function (stateNode) {\n        return stateNode._transient;\n      });\n\n      if (isTransient) {\n        maybeNextState = this.resolveRaisedTransition(maybeNextState, {\n          type: nullEvent\n        }, _event);\n      }\n\n      while (raisedEvents.length) {\n        var raisedEvent = raisedEvents.shift();\n        maybeNextState = this.resolveRaisedTransition(maybeNextState, raisedEvent._event, _event);\n      }\n    } // Detect if state changed\n\n\n    var changed = maybeNextState.changed || (history ? !!maybeNextState.actions.length || didUpdateContext || typeof history.value !== typeof maybeNextState.value || !stateValuesEqual(maybeNextState.value, history.value) : undefined);\n    maybeNextState.changed = changed; // Preserve original history after raised events\n\n    maybeNextState.historyValue = nextState.historyValue;\n    maybeNextState.history = history;\n    return maybeNextState;\n  };\n  /**\r\n   * Returns the child state node from its relative `stateKey`, or throws.\r\n   */\n\n\n  StateNode.prototype.getStateNode = function (stateKey) {\n    if (isStateId(stateKey)) {\n      return this.machine.getStateNodeById(stateKey);\n    }\n\n    if (!this.states) {\n      throw new Error(\"Unable to retrieve child state '\" + stateKey + \"' from '\" + this.id + \"'; no child states exist.\");\n    }\n\n    var result = this.states[stateKey];\n\n    if (!result) {\n      throw new Error(\"Child state '\" + stateKey + \"' does not exist on '\" + this.id + \"'\");\n    }\n\n    return result;\n  };\n  /**\r\n   * Returns the state node with the given `stateId`, or throws.\r\n   *\r\n   * @param stateId The state ID. The prefix \"#\" is removed.\r\n   */\n\n\n  StateNode.prototype.getStateNodeById = function (stateId) {\n    var resolvedStateId = isStateId(stateId) ? stateId.slice(STATE_IDENTIFIER.length) : stateId;\n\n    if (resolvedStateId === this.id) {\n      return this;\n    }\n\n    var stateNode = this.machine.idMap[resolvedStateId];\n\n    if (!stateNode) {\n      throw new Error(\"Child state node '#\" + resolvedStateId + \"' does not exist on machine '\" + this.id + \"'\");\n    }\n\n    return stateNode;\n  };\n  /**\r\n   * Returns the relative state node from the given `statePath`, or throws.\r\n   *\r\n   * @param statePath The string or string array relative path to the state node.\r\n   */\n\n\n  StateNode.prototype.getStateNodeByPath = function (statePath) {\n    if (typeof statePath === 'string' && isStateId(statePath)) {\n      try {\n        return this.getStateNodeById(statePath.slice(1));\n      } catch (e) {// try individual paths\n        // throw e;\n      }\n    }\n\n    var arrayStatePath = toStatePath(statePath, this.delimiter).slice();\n    var currentStateNode = this;\n\n    while (arrayStatePath.length) {\n      var key = arrayStatePath.shift();\n\n      if (!key.length) {\n        break;\n      }\n\n      currentStateNode = currentStateNode.getStateNode(key);\n    }\n\n    return currentStateNode;\n  };\n  /**\r\n   * Resolves a partial state value with its full representation in this machine.\r\n   *\r\n   * @param stateValue The partial state value to resolve.\r\n   */\n\n\n  StateNode.prototype.resolve = function (stateValue) {\n    var _a;\n\n    var _this = this;\n\n    if (!stateValue) {\n      return this.initialStateValue || EMPTY_OBJECT; // TODO: type-specific properties\n    }\n\n    switch (this.type) {\n      case 'parallel':\n        return mapValues(this.initialStateValue, function (subStateValue, subStateKey) {\n          return subStateValue ? _this.getStateNode(subStateKey).resolve(stateValue[subStateKey] || subStateValue) : EMPTY_OBJECT;\n        });\n\n      case 'compound':\n        if (isString(stateValue)) {\n          var subStateNode = this.getStateNode(stateValue);\n\n          if (subStateNode.type === 'parallel' || subStateNode.type === 'compound') {\n            return _a = {}, _a[stateValue] = subStateNode.initialStateValue, _a;\n          }\n\n          return stateValue;\n        }\n\n        if (!keys(stateValue).length) {\n          return this.initialStateValue || {};\n        }\n\n        return mapValues(stateValue, function (subStateValue, subStateKey) {\n          return subStateValue ? _this.getStateNode(subStateKey).resolve(subStateValue) : EMPTY_OBJECT;\n        });\n\n      default:\n        return stateValue || EMPTY_OBJECT;\n    }\n  };\n\n  StateNode.prototype.getResolvedPath = function (stateIdentifier) {\n    if (isStateId(stateIdentifier)) {\n      var stateNode = this.machine.idMap[stateIdentifier.slice(STATE_IDENTIFIER.length)];\n\n      if (!stateNode) {\n        throw new Error(\"Unable to find state node '\" + stateIdentifier + \"'\");\n      }\n\n      return stateNode.path;\n    }\n\n    return toStatePath(stateIdentifier, this.delimiter);\n  };\n\n  Object.defineProperty(StateNode.prototype, \"initialStateValue\", {\n    get: function () {\n      var _a;\n\n      if (this.__cache.initialStateValue) {\n        return this.__cache.initialStateValue;\n      }\n\n      var initialStateValue;\n\n      if (this.type === 'parallel') {\n        initialStateValue = mapFilterValues(this.states, function (state) {\n          return state.initialStateValue || EMPTY_OBJECT;\n        }, function (stateNode) {\n          return !(stateNode.type === 'history');\n        });\n      } else if (this.initial !== undefined) {\n        if (!this.states[this.initial]) {\n          throw new Error(\"Initial state '\" + this.initial + \"' not found on '\" + this.key + \"'\");\n        }\n\n        initialStateValue = isLeafNode(this.states[this.initial]) ? this.initial : (_a = {}, _a[this.initial] = this.states[this.initial].initialStateValue, _a);\n      }\n\n      this.__cache.initialStateValue = initialStateValue;\n      return this.__cache.initialStateValue;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  StateNode.prototype.getInitialState = function (stateValue, context) {\n    var configuration = this.getStateNodes(stateValue);\n    return this.resolveTransition({\n      configuration: configuration,\n      entrySet: configuration,\n      exitSet: [],\n      transitions: [],\n      source: undefined,\n      actions: []\n    }, undefined, undefined, context);\n  };\n\n  Object.defineProperty(StateNode.prototype, \"initialState\", {\n    /**\r\n     * The initial State instance, which includes all actions to be executed from\r\n     * entering the initial state.\r\n     */\n    get: function () {\n      this._init();\n\n      var initialStateValue = this.initialStateValue;\n\n      if (!initialStateValue) {\n        throw new Error(\"Cannot retrieve initial state from simple state '\" + this.id + \"'.\");\n      }\n\n      return this.getInitialState(initialStateValue);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(StateNode.prototype, \"target\", {\n    /**\r\n     * The target state value of the history state node, if it exists. This represents the\r\n     * default state value to transition to if no history value exists yet.\r\n     */\n    get: function () {\n      var target;\n\n      if (this.type === 'history') {\n        var historyConfig = this.config;\n\n        if (isString(historyConfig.target)) {\n          target = isStateId(historyConfig.target) ? pathToStateValue(this.machine.getStateNodeById(historyConfig.target).path.slice(this.path.length - 1)) : historyConfig.target;\n        } else {\n          target = historyConfig.target;\n        }\n      }\n\n      return target;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Returns the leaf nodes from a state path relative to this state node.\r\n   *\r\n   * @param relativeStateId The relative state path to retrieve the state nodes\r\n   * @param history The previous state to retrieve history\r\n   * @param resolve Whether state nodes should resolve to initial child state nodes\r\n   */\n\n  StateNode.prototype.getRelativeStateNodes = function (relativeStateId, historyValue, resolve) {\n    if (resolve === void 0) {\n      resolve = true;\n    }\n\n    return resolve ? relativeStateId.type === 'history' ? relativeStateId.resolveHistory(historyValue) : relativeStateId.initialStateNodes : [relativeStateId];\n  };\n\n  Object.defineProperty(StateNode.prototype, \"initialStateNodes\", {\n    get: function () {\n      var _this = this;\n\n      if (isLeafNode(this)) {\n        return [this];\n      } // Case when state node is compound but no initial state is defined\n\n\n      if (this.type === 'compound' && !this.initial) {\n        if (!IS_PRODUCTION) {\n          warn(false, \"Compound state node '\" + this.id + \"' has no initial state.\");\n        }\n\n        return [this];\n      }\n\n      var initialStateNodePaths = toStatePaths(this.initialStateValue);\n      return flatten(initialStateNodePaths.map(function (initialPath) {\n        return _this.getFromRelativePath(initialPath);\n      }));\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Retrieves state nodes from a relative path to this state node.\r\n   *\r\n   * @param relativePath The relative path from this state node\r\n   * @param historyValue\r\n   */\n\n  StateNode.prototype.getFromRelativePath = function (relativePath) {\n    if (!relativePath.length) {\n      return [this];\n    }\n\n    var _a = __read(relativePath),\n        stateKey = _a[0],\n        childStatePath = _a.slice(1);\n\n    if (!this.states) {\n      throw new Error(\"Cannot retrieve subPath '\" + stateKey + \"' from node with no states\");\n    }\n\n    var childStateNode = this.getStateNode(stateKey);\n\n    if (childStateNode.type === 'history') {\n      return childStateNode.resolveHistory();\n    }\n\n    if (!this.states[stateKey]) {\n      throw new Error(\"Child state '\" + stateKey + \"' does not exist on '\" + this.id + \"'\");\n    }\n\n    return this.states[stateKey].getFromRelativePath(childStatePath);\n  };\n\n  StateNode.prototype.historyValue = function (relativeStateValue) {\n    if (!keys(this.states).length) {\n      return undefined;\n    }\n\n    return {\n      current: relativeStateValue || this.initialStateValue,\n      states: mapFilterValues(this.states, function (stateNode, key) {\n        if (!relativeStateValue) {\n          return stateNode.historyValue();\n        }\n\n        var subStateValue = isString(relativeStateValue) ? undefined : relativeStateValue[key];\n        return stateNode.historyValue(subStateValue || stateNode.initialStateValue);\n      }, function (stateNode) {\n        return !stateNode.history;\n      })\n    };\n  };\n  /**\r\n   * Resolves to the historical value(s) of the parent state node,\r\n   * represented by state nodes.\r\n   *\r\n   * @param historyValue\r\n   */\n\n\n  StateNode.prototype.resolveHistory = function (historyValue) {\n    var _this = this;\n\n    if (this.type !== 'history') {\n      return [this];\n    }\n\n    var parent = this.parent;\n\n    if (!historyValue) {\n      var historyTarget = this.target;\n      return historyTarget ? flatten(toStatePaths(historyTarget).map(function (relativeChildPath) {\n        return parent.getFromRelativePath(relativeChildPath);\n      })) : parent.initialStateNodes;\n    }\n\n    var subHistoryValue = nestedPath(parent.path, 'states')(historyValue).current;\n\n    if (isString(subHistoryValue)) {\n      return [parent.getStateNode(subHistoryValue)];\n    }\n\n    return flatten(toStatePaths(subHistoryValue).map(function (subStatePath) {\n      return _this.history === 'deep' ? parent.getFromRelativePath(subStatePath) : [parent.states[subStatePath[0]]];\n    }));\n  };\n\n  Object.defineProperty(StateNode.prototype, \"stateIds\", {\n    /**\r\n     * All the state node IDs of this state node and its descendant state nodes.\r\n     */\n    get: function () {\n      var _this = this;\n\n      var childStateIds = flatten(keys(this.states).map(function (stateKey) {\n        return _this.states[stateKey].stateIds;\n      }));\n      return [this.id].concat(childStateIds);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(StateNode.prototype, \"events\", {\n    /**\r\n     * All the event types accepted by this state node and its descendants.\r\n     */\n    get: function () {\n      var e_7, _a, e_8, _b;\n\n      if (this.__cache.events) {\n        return this.__cache.events;\n      }\n\n      var states = this.states;\n      var events = new Set(this.ownEvents);\n\n      if (states) {\n        try {\n          for (var _c = __values(keys(states)), _d = _c.next(); !_d.done; _d = _c.next()) {\n            var stateId = _d.value;\n            var state = states[stateId];\n\n            if (state.states) {\n              try {\n                for (var _e = (e_8 = void 0, __values(state.events)), _f = _e.next(); !_f.done; _f = _e.next()) {\n                  var event_1 = _f.value;\n                  events.add(\"\" + event_1);\n                }\n              } catch (e_8_1) {\n                e_8 = {\n                  error: e_8_1\n                };\n              } finally {\n                try {\n                  if (_f && !_f.done && (_b = _e.return)) _b.call(_e);\n                } finally {\n                  if (e_8) throw e_8.error;\n                }\n              }\n            }\n          }\n        } catch (e_7_1) {\n          e_7 = {\n            error: e_7_1\n          };\n        } finally {\n          try {\n            if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n          } finally {\n            if (e_7) throw e_7.error;\n          }\n        }\n      }\n\n      return this.__cache.events = Array.from(events);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(StateNode.prototype, \"ownEvents\", {\n    /**\r\n     * All the events that have transitions directly from this state node.\r\n     *\r\n     * Excludes any inert events.\r\n     */\n    get: function () {\n      var events = new Set(this.transitions.filter(function (transition) {\n        return !(!transition.target && !transition.actions.length && transition.internal);\n      }).map(function (transition) {\n        return transition.eventType;\n      }));\n      return Array.from(events);\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  StateNode.prototype.resolveTarget = function (_target) {\n    var _this = this;\n\n    if (_target === undefined) {\n      // an undefined target signals that the state node should not transition from that state when receiving that event\n      return undefined;\n    }\n\n    return _target.map(function (target) {\n      if (!isString(target)) {\n        return target;\n      }\n\n      var isInternalTarget = target[0] === _this.delimiter; // If internal target is defined on machine,\n      // do not include machine key on target\n\n      if (isInternalTarget && !_this.parent) {\n        return _this.getStateNodeByPath(target.slice(1));\n      }\n\n      var resolvedTarget = isInternalTarget ? _this.key + target : target;\n\n      if (_this.parent) {\n        try {\n          var targetStateNode = _this.parent.getStateNodeByPath(resolvedTarget);\n\n          return targetStateNode;\n        } catch (err) {\n          throw new Error(\"Invalid transition definition for state node '\" + _this.id + \"':\\n\" + err.message);\n        }\n      } else {\n        return _this.getStateNodeByPath(resolvedTarget);\n      }\n    });\n  };\n\n  StateNode.prototype.formatTransition = function (transitionConfig) {\n    var _this = this;\n\n    var normalizedTarget = normalizeTarget(transitionConfig.target);\n    var internal = 'internal' in transitionConfig ? transitionConfig.internal : normalizedTarget ? normalizedTarget.some(function (_target) {\n      return isString(_target) && _target[0] === _this.delimiter;\n    }) : true;\n    var guards = this.machine.options.guards;\n    var target = this.resolveTarget(normalizedTarget);\n\n    var transition = __assign(__assign({}, transitionConfig), {\n      actions: toActionObjects(toArray(transitionConfig.actions)),\n      cond: toGuard(transitionConfig.cond, guards),\n      target: target,\n      source: this,\n      internal: internal,\n      eventType: transitionConfig.event\n    });\n\n    Object.defineProperty(transition, 'toJSON', {\n      value: function () {\n        return __assign(__assign({}, transition), {\n          target: transition.target ? transition.target.map(function (t) {\n            return \"#\" + t.id;\n          }) : undefined,\n          source: \"#{this.id}\"\n        });\n      }\n    });\n    return transition;\n  };\n\n  StateNode.prototype.formatTransitions = function () {\n    var e_9, _a;\n\n    var _this = this;\n\n    var onConfig;\n\n    if (!this.config.on) {\n      onConfig = [];\n    } else if (Array.isArray(this.config.on)) {\n      onConfig = this.config.on;\n    } else {\n      var _b = this.config.on,\n          _c = WILDCARD,\n          _d = _b[_c],\n          wildcardConfigs = _d === void 0 ? [] : _d,\n          strictOnConfigs_1 = __rest(_b, [typeof _c === \"symbol\" ? _c : _c + \"\"]);\n\n      onConfig = flatten(keys(strictOnConfigs_1).map(function (key) {\n        var arrayified = toTransitionConfigArray(key, strictOnConfigs_1[key]);\n\n        if (!IS_PRODUCTION) {\n          validateArrayifiedTransitions(_this, key, arrayified);\n        }\n\n        return arrayified;\n      }).concat(toTransitionConfigArray(WILDCARD, wildcardConfigs)));\n    }\n\n    var doneConfig = this.config.onDone ? toTransitionConfigArray(String(done(this.id)), this.config.onDone) : [];\n    var invokeConfig = flatten(this.invoke.map(function (invokeDef) {\n      var settleTransitions = [];\n\n      if (invokeDef.onDone) {\n        settleTransitions.push.apply(settleTransitions, __spread(toTransitionConfigArray(String(doneInvoke(invokeDef.id)), invokeDef.onDone)));\n      }\n\n      if (invokeDef.onError) {\n        settleTransitions.push.apply(settleTransitions, __spread(toTransitionConfigArray(String(error(invokeDef.id)), invokeDef.onError)));\n      }\n\n      return settleTransitions;\n    }));\n    var delayedTransitions = this.after;\n    var formattedTransitions = flatten(__spread(doneConfig, invokeConfig, onConfig).map(function (transitionConfig) {\n      return toArray(transitionConfig).map(function (transition) {\n        return _this.formatTransition(transition);\n      });\n    }));\n\n    try {\n      for (var delayedTransitions_1 = __values(delayedTransitions), delayedTransitions_1_1 = delayedTransitions_1.next(); !delayedTransitions_1_1.done; delayedTransitions_1_1 = delayedTransitions_1.next()) {\n        var delayedTransition = delayedTransitions_1_1.value;\n        formattedTransitions.push(delayedTransition);\n      }\n    } catch (e_9_1) {\n      e_9 = {\n        error: e_9_1\n      };\n    } finally {\n      try {\n        if (delayedTransitions_1_1 && !delayedTransitions_1_1.done && (_a = delayedTransitions_1.return)) _a.call(delayedTransitions_1);\n      } finally {\n        if (e_9) throw e_9.error;\n      }\n    }\n\n    return formattedTransitions;\n  };\n\n  return StateNode;\n}();\n\nexport { StateNode };","map":{"version":3,"sources":["/Users/nickbrinser/Desktop/xStateApp/x-state-proj/node_modules/xstate/es/StateNode.js"],"names":["__assign","__values","__spread","__read","__rest","STATE_DELIMITER","IS_PRODUCTION","mapValues","isArray","flatten","keys","toArray","toStateValue","isString","getEventType","matchesState","path","evaluateGuard","mapContext","toSCXMLEvent","pathToStateValue","isBuiltInEvent","partition","updateHistoryValue","toStatePath","mapFilterValues","warn","toStatePaths","nestedPath","normalizeTarget","toGuard","toTransitionConfigArray","isMachine","isFunction","SpecialTargets","getAllStateNodes","getConfiguration","has","getChildren","isInFinalState","getValue","isLeafNode","start","start$1","stop","stop$1","invoke","update","nullEvent","raise","raise$1","send","send$1","done","toActionObjects","resolveActions","doneInvoke","error","toActionObject","toActivityDefinition","after","cancel","initEvent","State","stateValuesEqual","createInvocableActor","NULL_EVENT","STATE_IDENTIFIER","WILDCARD","EMPTY_OBJECT","isStateId","str","createDefaultOptions","actions","guards","services","activities","delays","validateArrayifiedTransitions","stateNode","event","transitions","hasNonLastUnguardedTarget","slice","some","transition","target","eventText","id","StateNode","config","options","context","_this","order","__xstatenode","__cache","events","undefined","relativeValue","Map","initialStateValue","initialState","on","candidates","delayedTransitions","idMap","Object","assign","parent","_parent","key","_key","machine","concat","delimiter","join","version","type","parallel","states","length","history","initial","stateConfig","_a","dfs","e_1","_b","_c","next","child","value","e_1_1","return","call","_transient","Array","strict","onEntry","entry","map","action","onExit","exit","meta","data","invokeConfig","i","src","invokeSrc","activity","bind","prototype","_init","forEach","withConfig","withContext","defineProperty","get","state","definition","enumerable","configurable","toJSON","reduce","eventType","push","getDelayedTransitions","formatTransitions","getCandidates","eventName","transient","filter","sameEventType","afterConfig","mutateEntryExit","delay","delayRef","configTransition","resolvedTransition","resolvedDelay","isNaN","delayedTransition","formatTransition","getStateNodes","stateValue","getStateNode","subStateKeys","subStateNodes","subStateKey","allSubStateNodes","subStateNode","handles","includes","resolveState","configuration","from","resolve","transitionLeafNode","_event","transitionCompoundNode","_transition","transitionParallelNode","e_2","transitionMap","subStateValue","e_2_1","stateTransitions","enabledTransitions","st","willTransition","entryNodes","t","entrySet","exitSet","source","e_3","name","nextStateNodes","selectedTransition","candidate","cond","stateIn","in","resolvedContext","isInState","matches","getStateNodeById","guardPassed","err","Error","message","apply","e_3_1","allNextStateNodes","getRelativeStateNodes","historyValue","isInternal","internal","reentryNodes","n","nodesFromChild","childStateNode","escapes","nodes","marker","getActions","currentContext","prevState","e_4","e_5","prevConfig","resolvedConfig","resolvedConfig_1","resolvedConfig_1_1","sn","e_4_1","prevConfig_1","prevConfig_1_1","e_5_1","doneEvents","grandparent","every","parentNode","sort","a","b","entryStates","Set","exitStates","entryActions","exitActions","currentState","resolvedStateValue","getResolvedPath","stateTransition","resolveTransition","resolveRaisedTransition","originalEvent","currentActions","unshift","e_6","actions_1","actions_1_1","e_6_1","resolvedActions","updatedContext","to","Internal","raisedEvents","nonRaisedActions","invokeActions","children","acc","resolvedConfiguration","isDone","nextState","_sessionid","didUpdateContext","changed","maybeNextState","isTransient","raisedEvent","shift","stateKey","result","stateId","resolvedStateId","getStateNodeByPath","statePath","e","arrayStatePath","currentStateNode","stateIdentifier","getInitialState","historyConfig","relativeStateId","resolveHistory","initialStateNodes","initialStateNodePaths","initialPath","getFromRelativePath","relativePath","childStatePath","relativeStateValue","current","historyTarget","relativeChildPath","subHistoryValue","subStatePath","childStateIds","stateIds","e_7","e_8","ownEvents","_d","_e","_f","event_1","add","e_8_1","e_7_1","resolveTarget","_target","isInternalTarget","resolvedTarget","targetStateNode","transitionConfig","normalizedTarget","e_9","onConfig","wildcardConfigs","strictOnConfigs_1","arrayified","doneConfig","onDone","String","invokeDef","settleTransitions","onError","formattedTransitions","delayedTransitions_1","delayedTransitions_1_1","e_9_1"],"mappings":"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","sourcesContent":["import { __assign, __values, __spread, __read, __rest } from './_virtual/_tslib.js';\nimport { STATE_DELIMITER } from './constants.js';\nimport { IS_PRODUCTION } from './environment.js';\nimport { mapValues, isArray, flatten, keys, toArray, toStateValue, isString, getEventType, matchesState, path, evaluateGuard, mapContext, toSCXMLEvent, pathToStateValue, isBuiltInEvent, partition, updateHistoryValue, toStatePath, mapFilterValues, warn, toStatePaths, nestedPath, normalizeTarget, toGuard, toTransitionConfigArray, isMachine, isFunction } from './utils.js';\nimport { SpecialTargets } from './types.js';\nimport { getAllStateNodes, getConfiguration, has, getChildren, isInFinalState, getValue, isLeafNode } from './stateUtils.js';\nimport { start as start$1, stop as stop$1, invoke, update, nullEvent, raise as raise$1, send as send$1 } from './actionTypes.js';\nimport { done, start, raise, stop, toActionObjects, resolveActions, doneInvoke, error, toActionObject, toActivityDefinition, after, send, cancel, initEvent } from './actions.js';\nimport { State, stateValuesEqual } from './State.js';\nimport { createInvocableActor } from './Actor.js';\nvar NULL_EVENT = '';\nvar STATE_IDENTIFIER = '#';\nvar WILDCARD = '*';\nvar EMPTY_OBJECT = {};\n\nvar isStateId = function (str) {\n  return str[0] === STATE_IDENTIFIER;\n};\n\nvar createDefaultOptions = function () {\n  return {\n    actions: {},\n    guards: {},\n    services: {},\n    activities: {},\n    delays: {}\n  };\n};\n\nvar validateArrayifiedTransitions = function (stateNode, event, transitions) {\n  var hasNonLastUnguardedTarget = transitions.slice(0, -1).some(function (transition) {\n    return !('cond' in transition) && !('in' in transition) && (isString(transition.target) || isMachine(transition.target));\n  });\n  var eventText = event === NULL_EVENT ? 'the transient event' : \"event '\" + event + \"'\";\n  warn(!hasNonLastUnguardedTarget, \"One or more transitions for \" + eventText + \" on state '\" + stateNode.id + \"' are unreachable. \" + \"Make sure that the default transition is the last one defined.\");\n};\n\nvar StateNode =\n/*#__PURE__*/\n\n/** @class */\nfunction () {\n  function StateNode(\n  /**\r\n   * The raw config used to create the machine.\r\n   */\n  config, options,\n  /**\r\n   * The initial extended state\r\n   */\n  context) {\n    var _this = this;\n\n    this.config = config;\n    this.context = context;\n    /**\r\n     * The order this state node appears. Corresponds to the implicit SCXML document order.\r\n     */\n\n    this.order = -1;\n    this.__xstatenode = true;\n    this.__cache = {\n      events: undefined,\n      relativeValue: new Map(),\n      initialStateValue: undefined,\n      initialState: undefined,\n      on: undefined,\n      transitions: undefined,\n      candidates: {},\n      delayedTransitions: undefined\n    };\n    this.idMap = {};\n    this.options = Object.assign(createDefaultOptions(), options);\n    this.parent = this.options._parent;\n    this.key = this.config.key || this.options._key || this.config.id || '(machine)';\n    this.machine = this.parent ? this.parent.machine : this;\n    this.path = this.parent ? this.parent.path.concat(this.key) : [];\n    this.delimiter = this.config.delimiter || (this.parent ? this.parent.delimiter : STATE_DELIMITER);\n    this.id = this.config.id || __spread([this.machine.key], this.path).join(this.delimiter);\n    this.version = this.parent ? this.parent.version : this.config.version;\n    this.type = this.config.type || (this.config.parallel ? 'parallel' : this.config.states && keys(this.config.states).length ? 'compound' : this.config.history ? 'history' : 'atomic');\n\n    if (!IS_PRODUCTION) {\n      warn(!('parallel' in this.config), \"The \\\"parallel\\\" property is deprecated and will be removed in version 4.1. \" + (this.config.parallel ? \"Replace with `type: 'parallel'`\" : \"Use `type: '\" + this.type + \"'`\") + \" in the config for state node '\" + this.id + \"' instead.\");\n    }\n\n    this.initial = this.config.initial;\n    this.states = this.config.states ? mapValues(this.config.states, function (stateConfig, key) {\n      var _a;\n\n      var stateNode = new StateNode(stateConfig, {\n        _parent: _this,\n        _key: key\n      });\n      Object.assign(_this.idMap, __assign((_a = {}, _a[stateNode.id] = stateNode, _a), stateNode.idMap));\n      return stateNode;\n    }) : EMPTY_OBJECT; // Document order\n\n    var order = 0;\n\n    function dfs(stateNode) {\n      var e_1, _a;\n\n      stateNode.order = order++;\n\n      try {\n        for (var _b = __values(getChildren(stateNode)), _c = _b.next(); !_c.done; _c = _b.next()) {\n          var child = _c.value;\n          dfs(child);\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n    }\n\n    dfs(this); // History config\n\n    this.history = this.config.history === true ? 'shallow' : this.config.history || false;\n    this._transient = !this.config.on ? false : Array.isArray(this.config.on) ? this.config.on.some(function (_a) {\n      var event = _a.event;\n      return event === NULL_EVENT;\n    }) : NULL_EVENT in this.config.on;\n    this.strict = !!this.config.strict; // TODO: deprecate (entry)\n\n    this.onEntry = toArray(this.config.entry || this.config.onEntry).map(function (action) {\n      return toActionObject(action);\n    }); // TODO: deprecate (exit)\n\n    this.onExit = toArray(this.config.exit || this.config.onExit).map(function (action) {\n      return toActionObject(action);\n    });\n    this.meta = this.config.meta;\n    this.data = this.type === 'final' ? this.config.data : undefined;\n    this.invoke = toArray(this.config.invoke).map(function (invokeConfig, i) {\n      var _a, _b;\n\n      if (isMachine(invokeConfig)) {\n        _this.machine.options.services = __assign((_a = {}, _a[invokeConfig.id] = invokeConfig, _a), _this.machine.options.services);\n        return {\n          type: invoke,\n          src: invokeConfig.id,\n          id: invokeConfig.id\n        };\n      } else if (typeof invokeConfig.src !== 'string') {\n        var invokeSrc = _this.id + \":invocation[\" + i + \"]\"; // TODO: util function\n\n        _this.machine.options.services = __assign((_b = {}, _b[invokeSrc] = invokeConfig.src, _b), _this.machine.options.services);\n        return __assign(__assign({\n          type: invoke,\n          id: invokeSrc\n        }, invokeConfig), {\n          src: invokeSrc\n        });\n      } else {\n        return __assign(__assign({}, invokeConfig), {\n          type: invoke,\n          id: invokeConfig.id || invokeConfig.src,\n          src: invokeConfig.src\n        });\n      }\n    });\n    this.activities = toArray(this.config.activities).concat(this.invoke).map(function (activity) {\n      return toActivityDefinition(activity);\n    });\n    this.transition = this.transition.bind(this);\n  }\n\n  StateNode.prototype._init = function () {\n    if (this.__cache.transitions) {\n      return;\n    }\n\n    getAllStateNodes(this).forEach(function (stateNode) {\n      return stateNode.on;\n    });\n  };\n  /**\r\n   * Clones this state machine with custom options and context.\r\n   *\r\n   * @param options Options (actions, guards, activities, services) to recursively merge with the existing options.\r\n   * @param context Custom context (will override predefined context)\r\n   */\n\n\n  StateNode.prototype.withConfig = function (options, context) {\n    if (context === void 0) {\n      context = this.context;\n    }\n\n    var _a = this.options,\n        actions = _a.actions,\n        activities = _a.activities,\n        guards = _a.guards,\n        services = _a.services,\n        delays = _a.delays;\n    return new StateNode(this.config, {\n      actions: __assign(__assign({}, actions), options.actions),\n      activities: __assign(__assign({}, activities), options.activities),\n      guards: __assign(__assign({}, guards), options.guards),\n      services: __assign(__assign({}, services), options.services),\n      delays: __assign(__assign({}, delays), options.delays)\n    }, context);\n  };\n  /**\r\n   * Clones this state machine with custom context.\r\n   *\r\n   * @param context Custom context (will override predefined context, not recursive)\r\n   */\n\n\n  StateNode.prototype.withContext = function (context) {\n    return new StateNode(this.config, this.options, context);\n  };\n\n  Object.defineProperty(StateNode.prototype, \"definition\", {\n    /**\r\n     * The well-structured state node definition.\r\n     */\n    get: function () {\n      return {\n        id: this.id,\n        key: this.key,\n        version: this.version,\n        context: this.context,\n        type: this.type,\n        initial: this.initial,\n        history: this.history,\n        states: mapValues(this.states, function (state) {\n          return state.definition;\n        }),\n        on: this.on,\n        transitions: this.transitions,\n        entry: this.onEntry,\n        exit: this.onExit,\n        activities: this.activities || [],\n        meta: this.meta,\n        order: this.order || -1,\n        data: this.data,\n        invoke: this.invoke\n      };\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  StateNode.prototype.toJSON = function () {\n    return this.definition;\n  };\n\n  Object.defineProperty(StateNode.prototype, \"on\", {\n    /**\r\n     * The mapping of events to transitions.\r\n     */\n    get: function () {\n      if (this.__cache.on) {\n        return this.__cache.on;\n      }\n\n      var transitions = this.transitions;\n      return this.__cache.on = transitions.reduce(function (map, transition) {\n        map[transition.eventType] = map[transition.eventType] || [];\n        map[transition.eventType].push(transition);\n        return map;\n      }, {});\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(StateNode.prototype, \"after\", {\n    get: function () {\n      return this.__cache.delayedTransitions || (this.__cache.delayedTransitions = this.getDelayedTransitions(), this.__cache.delayedTransitions);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(StateNode.prototype, \"transitions\", {\n    /**\r\n     * All the transitions that can be taken from this state node.\r\n     */\n    get: function () {\n      return this.__cache.transitions || (this.__cache.transitions = this.formatTransitions(), this.__cache.transitions);\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  StateNode.prototype.getCandidates = function (eventName) {\n    if (this.__cache.candidates[eventName]) {\n      return this.__cache.candidates[eventName];\n    }\n\n    var transient = eventName === NULL_EVENT;\n    var candidates = this.transitions.filter(function (transition) {\n      var sameEventType = transition.eventType === eventName; // null events should only match against eventless transitions\n\n      return transient ? sameEventType : sameEventType || transition.eventType === WILDCARD;\n    });\n    this.__cache.candidates[eventName] = candidates;\n    return candidates;\n  };\n  /**\r\n   * All delayed transitions from the config.\r\n   */\n\n\n  StateNode.prototype.getDelayedTransitions = function () {\n    var _this = this;\n\n    var afterConfig = this.config.after;\n\n    if (!afterConfig) {\n      return [];\n    }\n\n    var mutateEntryExit = function (delay, i) {\n      var delayRef = isFunction(delay) ? _this.id + \":delay[\" + i + \"]\" : delay;\n      var eventType = after(delayRef, _this.id);\n\n      _this.onEntry.push(send(eventType, {\n        delay: delay\n      }));\n\n      _this.onExit.push(cancel(eventType));\n\n      return eventType;\n    };\n\n    var delayedTransitions = isArray(afterConfig) ? afterConfig.map(function (transition, i) {\n      var eventType = mutateEntryExit(transition.delay, i);\n      return __assign(__assign({}, transition), {\n        event: eventType\n      });\n    }) : flatten(keys(afterConfig).map(function (delay, i) {\n      var configTransition = afterConfig[delay];\n      var resolvedTransition = isString(configTransition) ? {\n        target: configTransition\n      } : configTransition;\n      var resolvedDelay = !isNaN(+delay) ? +delay : delay;\n      var eventType = mutateEntryExit(resolvedDelay, i);\n      return toArray(resolvedTransition).map(function (transition) {\n        return __assign(__assign({}, transition), {\n          event: eventType,\n          delay: resolvedDelay\n        });\n      });\n    }));\n    return delayedTransitions.map(function (delayedTransition) {\n      var delay = delayedTransition.delay;\n      return __assign(__assign({}, _this.formatTransition(delayedTransition)), {\n        delay: delay\n      });\n    });\n  };\n  /**\r\n   * Returns the state nodes represented by the current state value.\r\n   *\r\n   * @param state The state value or State instance\r\n   */\n\n\n  StateNode.prototype.getStateNodes = function (state) {\n    var _a;\n\n    var _this = this;\n\n    if (!state) {\n      return [];\n    }\n\n    var stateValue = state instanceof State ? state.value : toStateValue(state, this.delimiter);\n\n    if (isString(stateValue)) {\n      var initialStateValue = this.getStateNode(stateValue).initial;\n      return initialStateValue !== undefined ? this.getStateNodes((_a = {}, _a[stateValue] = initialStateValue, _a)) : [this.states[stateValue]];\n    }\n\n    var subStateKeys = keys(stateValue);\n    var subStateNodes = subStateKeys.map(function (subStateKey) {\n      return _this.getStateNode(subStateKey);\n    });\n    return subStateNodes.concat(subStateKeys.reduce(function (allSubStateNodes, subStateKey) {\n      var subStateNode = _this.getStateNode(subStateKey).getStateNodes(stateValue[subStateKey]);\n\n      return allSubStateNodes.concat(subStateNode);\n    }, []));\n  };\n  /**\r\n   * Returns `true` if this state node explicitly handles the given event.\r\n   *\r\n   * @param event The event in question\r\n   */\n\n\n  StateNode.prototype.handles = function (event) {\n    var eventType = getEventType(event);\n    return this.events.includes(eventType);\n  };\n  /**\r\n   * Resolves the given `state` to a new `State` instance relative to this machine.\r\n   *\r\n   * This ensures that `.events` and `.nextEvents` represent the correct values.\r\n   *\r\n   * @param state The state to resolve\r\n   */\n\n\n  StateNode.prototype.resolveState = function (state) {\n    var configuration = Array.from(getConfiguration([], this.getStateNodes(state.value)));\n    return new State(__assign(__assign({}, state), {\n      value: this.resolve(state.value),\n      configuration: configuration\n    }));\n  };\n\n  StateNode.prototype.transitionLeafNode = function (stateValue, state, _event) {\n    var stateNode = this.getStateNode(stateValue);\n    var next = stateNode.next(state, _event);\n\n    if (!next || !next.transitions.length) {\n      return this.next(state, _event);\n    }\n\n    return next;\n  };\n\n  StateNode.prototype.transitionCompoundNode = function (stateValue, state, _event) {\n    var subStateKeys = keys(stateValue);\n    var stateNode = this.getStateNode(subStateKeys[0]);\n\n    var next = stateNode._transition(stateValue[subStateKeys[0]], state, _event);\n\n    if (!next || !next.transitions.length) {\n      return this.next(state, _event);\n    }\n\n    return next;\n  };\n\n  StateNode.prototype.transitionParallelNode = function (stateValue, state, _event) {\n    var e_2, _a;\n\n    var transitionMap = {};\n\n    try {\n      for (var _b = __values(keys(stateValue)), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var subStateKey = _c.value;\n        var subStateValue = stateValue[subStateKey];\n\n        if (!subStateValue) {\n          continue;\n        }\n\n        var subStateNode = this.getStateNode(subStateKey);\n\n        var next = subStateNode._transition(subStateValue, state, _event);\n\n        if (next) {\n          transitionMap[subStateKey] = next;\n        }\n      }\n    } catch (e_2_1) {\n      e_2 = {\n        error: e_2_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_2) throw e_2.error;\n      }\n    }\n\n    var stateTransitions = keys(transitionMap).map(function (key) {\n      return transitionMap[key];\n    });\n    var enabledTransitions = flatten(stateTransitions.map(function (st) {\n      return st.transitions;\n    }));\n    var willTransition = stateTransitions.some(function (st) {\n      return st.transitions.length > 0;\n    });\n\n    if (!willTransition) {\n      return this.next(state, _event);\n    }\n\n    var entryNodes = flatten(stateTransitions.map(function (t) {\n      return t.entrySet;\n    }));\n    var configuration = flatten(keys(transitionMap).map(function (key) {\n      return transitionMap[key].configuration;\n    }));\n    return {\n      transitions: enabledTransitions,\n      entrySet: entryNodes,\n      exitSet: flatten(stateTransitions.map(function (t) {\n        return t.exitSet;\n      })),\n      configuration: configuration,\n      source: state,\n      actions: flatten(keys(transitionMap).map(function (key) {\n        return transitionMap[key].actions;\n      }))\n    };\n  };\n\n  StateNode.prototype._transition = function (stateValue, state, _event) {\n    // leaf node\n    if (isString(stateValue)) {\n      return this.transitionLeafNode(stateValue, state, _event);\n    } // hierarchical node\n\n\n    if (keys(stateValue).length === 1) {\n      return this.transitionCompoundNode(stateValue, state, _event);\n    } // orthogonal node\n\n\n    return this.transitionParallelNode(stateValue, state, _event);\n  };\n\n  StateNode.prototype.next = function (state, _event) {\n    var e_3, _a;\n\n    var _this = this;\n\n    var eventName = _event.name;\n    var actions = [];\n    var nextStateNodes = [];\n    var selectedTransition;\n\n    try {\n      for (var _b = __values(this.getCandidates(eventName)), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var candidate = _c.value;\n        var cond = candidate.cond,\n            stateIn = candidate.in;\n        var resolvedContext = state.context;\n        var isInState = stateIn ? isString(stateIn) && isStateId(stateIn) ? // Check if in state by ID\n        state.matches(toStateValue(this.getStateNodeById(stateIn).path, this.delimiter)) : // Check if in state by relative grandparent\n        matchesState(toStateValue(stateIn, this.delimiter), path(this.path.slice(0, -2))(state.value)) : true;\n        var guardPassed = false;\n\n        try {\n          guardPassed = !cond || evaluateGuard(this.machine, cond, resolvedContext, _event, state);\n        } catch (err) {\n          throw new Error(\"Unable to evaluate guard '\" + (cond.name || cond.type) + \"' in transition for event '\" + eventName + \"' in state node '\" + this.id + \"':\\n\" + err.message);\n        }\n\n        if (guardPassed && isInState) {\n          if (candidate.target !== undefined) {\n            nextStateNodes = candidate.target;\n          }\n\n          actions.push.apply(actions, __spread(candidate.actions));\n          selectedTransition = candidate;\n          break;\n        }\n      }\n    } catch (e_3_1) {\n      e_3 = {\n        error: e_3_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_3) throw e_3.error;\n      }\n    }\n\n    if (!selectedTransition) {\n      return undefined;\n    }\n\n    if (!nextStateNodes.length) {\n      return {\n        transitions: [selectedTransition],\n        entrySet: [],\n        exitSet: [],\n        configuration: state.value ? [this] : [],\n        source: state,\n        actions: actions\n      };\n    }\n\n    var allNextStateNodes = flatten(nextStateNodes.map(function (stateNode) {\n      return _this.getRelativeStateNodes(stateNode, state.historyValue);\n    }));\n    var isInternal = !!selectedTransition.internal;\n    var reentryNodes = isInternal ? [] : flatten(allNextStateNodes.map(function (n) {\n      return _this.nodesFromChild(n);\n    }));\n    return {\n      transitions: [selectedTransition],\n      entrySet: reentryNodes,\n      exitSet: isInternal ? [] : [this],\n      configuration: allNextStateNodes,\n      source: state,\n      actions: actions\n    };\n  };\n\n  StateNode.prototype.nodesFromChild = function (childStateNode) {\n    if (childStateNode.escapes(this)) {\n      return [];\n    }\n\n    var nodes = [];\n    var marker = childStateNode;\n\n    while (marker && marker !== this) {\n      nodes.push(marker);\n      marker = marker.parent;\n    }\n\n    nodes.push(this); // inclusive\n\n    return nodes;\n  };\n  /**\r\n   * Whether the given state node \"escapes\" this state node. If the `stateNode` is equal to or the parent of\r\n   * this state node, it does not escape.\r\n   */\n\n\n  StateNode.prototype.escapes = function (stateNode) {\n    if (this === stateNode) {\n      return false;\n    }\n\n    var parent = this.parent;\n\n    while (parent) {\n      if (parent === stateNode) {\n        return false;\n      }\n\n      parent = parent.parent;\n    }\n\n    return true;\n  };\n\n  StateNode.prototype.getActions = function (transition, currentContext, _event, prevState) {\n    var e_4, _a, e_5, _b;\n\n    var prevConfig = getConfiguration([], prevState ? this.getStateNodes(prevState.value) : [this]);\n    var resolvedConfig = transition.configuration.length ? getConfiguration(prevConfig, transition.configuration) : prevConfig;\n\n    try {\n      for (var resolvedConfig_1 = __values(resolvedConfig), resolvedConfig_1_1 = resolvedConfig_1.next(); !resolvedConfig_1_1.done; resolvedConfig_1_1 = resolvedConfig_1.next()) {\n        var sn = resolvedConfig_1_1.value;\n\n        if (!has(prevConfig, sn)) {\n          transition.entrySet.push(sn);\n        }\n      }\n    } catch (e_4_1) {\n      e_4 = {\n        error: e_4_1\n      };\n    } finally {\n      try {\n        if (resolvedConfig_1_1 && !resolvedConfig_1_1.done && (_a = resolvedConfig_1.return)) _a.call(resolvedConfig_1);\n      } finally {\n        if (e_4) throw e_4.error;\n      }\n    }\n\n    try {\n      for (var prevConfig_1 = __values(prevConfig), prevConfig_1_1 = prevConfig_1.next(); !prevConfig_1_1.done; prevConfig_1_1 = prevConfig_1.next()) {\n        var sn = prevConfig_1_1.value;\n\n        if (!has(resolvedConfig, sn) || has(transition.exitSet, sn.parent)) {\n          transition.exitSet.push(sn);\n        }\n      }\n    } catch (e_5_1) {\n      e_5 = {\n        error: e_5_1\n      };\n    } finally {\n      try {\n        if (prevConfig_1_1 && !prevConfig_1_1.done && (_b = prevConfig_1.return)) _b.call(prevConfig_1);\n      } finally {\n        if (e_5) throw e_5.error;\n      }\n    }\n\n    if (!transition.source) {\n      transition.exitSet = []; // Ensure that root StateNode (machine) is entered\n\n      transition.entrySet.push(this);\n    }\n\n    var doneEvents = flatten(transition.entrySet.map(function (sn) {\n      var events = [];\n\n      if (sn.type !== 'final') {\n        return events;\n      }\n\n      var parent = sn.parent;\n\n      if (!parent.parent) {\n        return events;\n      }\n\n      events.push(done(sn.id, sn.data), // TODO: deprecate - final states should not emit done events for their own state.\n      done(parent.id, sn.data ? mapContext(sn.data, currentContext, _event) : undefined));\n      var grandparent = parent.parent;\n\n      if (grandparent.type === 'parallel') {\n        if (getChildren(grandparent).every(function (parentNode) {\n          return isInFinalState(transition.configuration, parentNode);\n        })) {\n          events.push(done(grandparent.id, grandparent.data));\n        }\n      }\n\n      return events;\n    }));\n    transition.exitSet.sort(function (a, b) {\n      return b.order - a.order;\n    });\n    transition.entrySet.sort(function (a, b) {\n      return a.order - b.order;\n    });\n    var entryStates = new Set(transition.entrySet);\n    var exitStates = new Set(transition.exitSet);\n\n    var _c = __read([flatten(Array.from(entryStates).map(function (stateNode) {\n      return __spread(stateNode.activities.map(function (activity) {\n        return start(activity);\n      }), stateNode.onEntry);\n    })).concat(doneEvents.map(raise)), flatten(Array.from(exitStates).map(function (stateNode) {\n      return __spread(stateNode.onExit, stateNode.activities.map(function (activity) {\n        return stop(activity);\n      }));\n    }))], 2),\n        entryActions = _c[0],\n        exitActions = _c[1];\n\n    var actions = toActionObjects(exitActions.concat(transition.actions).concat(entryActions), this.machine.options.actions);\n    return actions;\n  };\n  /**\r\n   * Determines the next state given the current `state` and sent `event`.\r\n   *\r\n   * @param state The current State instance or state value\r\n   * @param event The event that was sent at the current state\r\n   * @param context The current context (extended state) of the current state\r\n   */\n\n\n  StateNode.prototype.transition = function (state, event, context) {\n    if (state === void 0) {\n      state = this.initialState;\n    }\n\n    var _event = toSCXMLEvent(event);\n\n    var currentState;\n\n    if (state instanceof State) {\n      currentState = context === undefined ? state : this.resolveState(State.from(state, context));\n    } else {\n      var resolvedStateValue = isString(state) ? this.resolve(pathToStateValue(this.getResolvedPath(state))) : this.resolve(state);\n      var resolvedContext = context ? context : this.machine.context;\n      currentState = this.resolveState(State.from(resolvedStateValue, resolvedContext));\n    }\n\n    if (!IS_PRODUCTION && _event.name === WILDCARD) {\n      throw new Error(\"An event cannot have the wildcard type ('\" + WILDCARD + \"')\");\n    }\n\n    if (this.strict) {\n      if (!this.events.includes(_event.name) && !isBuiltInEvent(_event.name)) {\n        throw new Error(\"Machine '\" + this.id + \"' does not accept event '\" + _event.name + \"'\");\n      }\n    }\n\n    var stateTransition = this._transition(currentState.value, currentState, _event) || {\n      transitions: [],\n      configuration: [],\n      entrySet: [],\n      exitSet: [],\n      source: currentState,\n      actions: []\n    };\n    var prevConfig = getConfiguration([], this.getStateNodes(currentState.value));\n    var resolvedConfig = stateTransition.configuration.length ? getConfiguration(prevConfig, stateTransition.configuration) : prevConfig;\n    stateTransition.configuration = __spread(resolvedConfig);\n    return this.resolveTransition(stateTransition, currentState, _event);\n  };\n\n  StateNode.prototype.resolveRaisedTransition = function (state, _event, originalEvent) {\n    var _a;\n\n    var currentActions = state.actions;\n    state = this.transition(state, _event); // Save original event to state\n\n    state._event = originalEvent;\n    state.event = originalEvent.data;\n\n    (_a = state.actions).unshift.apply(_a, __spread(currentActions));\n\n    return state;\n  };\n\n  StateNode.prototype.resolveTransition = function (stateTransition, currentState, _event, context) {\n    var e_6, _a;\n\n    if (_event === void 0) {\n      _event = initEvent;\n    }\n\n    if (context === void 0) {\n      context = this.machine.context;\n    }\n\n    var configuration = stateTransition.configuration; // Transition will \"apply\" if:\n    // - this is the initial state (there is no current state)\n    // - OR there are transitions\n\n    var willTransition = !currentState || stateTransition.transitions.length > 0;\n    var resolvedStateValue = willTransition ? getValue(this.machine, configuration) : undefined;\n    var historyValue = currentState ? currentState.historyValue ? currentState.historyValue : stateTransition.source ? this.machine.historyValue(currentState.value) : undefined : undefined;\n    var currentContext = currentState ? currentState.context : context;\n    var actions = this.getActions(stateTransition, currentContext, _event, currentState);\n    var activities = currentState ? __assign({}, currentState.activities) : {};\n\n    try {\n      for (var actions_1 = __values(actions), actions_1_1 = actions_1.next(); !actions_1_1.done; actions_1_1 = actions_1.next()) {\n        var action = actions_1_1.value;\n\n        if (action.type === start$1) {\n          activities[action.activity.type] = action;\n        } else if (action.type === stop$1) {\n          activities[action.activity.type] = false;\n        }\n      }\n    } catch (e_6_1) {\n      e_6 = {\n        error: e_6_1\n      };\n    } finally {\n      try {\n        if (actions_1_1 && !actions_1_1.done && (_a = actions_1.return)) _a.call(actions_1);\n      } finally {\n        if (e_6) throw e_6.error;\n      }\n    }\n\n    var _b = __read(resolveActions(this, currentState, currentContext, _event, actions), 2),\n        resolvedActions = _b[0],\n        updatedContext = _b[1];\n\n    var _c = __read(partition(resolvedActions, function (action) {\n      return action.type === raise$1 || action.type === send$1 && action.to === SpecialTargets.Internal;\n    }), 2),\n        raisedEvents = _c[0],\n        nonRaisedActions = _c[1];\n\n    var invokeActions = resolvedActions.filter(function (action) {\n      return action.type === start$1 && action.activity.type === invoke;\n    });\n    var children = invokeActions.reduce(function (acc, action) {\n      acc[action.activity.id] = createInvocableActor(action.activity);\n      return acc;\n    }, currentState ? __assign({}, currentState.children) : {});\n    var resolvedConfiguration = resolvedStateValue ? stateTransition.configuration : currentState ? currentState.configuration : [];\n    var meta = resolvedConfiguration.reduce(function (acc, stateNode) {\n      if (stateNode.meta !== undefined) {\n        acc[stateNode.id] = stateNode.meta;\n      }\n\n      return acc;\n    }, {});\n    var isDone = isInFinalState(resolvedConfiguration, this);\n    var nextState = new State({\n      value: resolvedStateValue || currentState.value,\n      context: updatedContext,\n      _event: _event,\n      // Persist _sessionid between states\n      _sessionid: currentState ? currentState._sessionid : null,\n      historyValue: resolvedStateValue ? historyValue ? updateHistoryValue(historyValue, resolvedStateValue) : undefined : currentState ? currentState.historyValue : undefined,\n      history: !resolvedStateValue || stateTransition.source ? currentState : undefined,\n      actions: resolvedStateValue ? nonRaisedActions : [],\n      activities: resolvedStateValue ? activities : currentState ? currentState.activities : {},\n      meta: resolvedStateValue ? meta : currentState ? currentState.meta : undefined,\n      events: [],\n      configuration: resolvedConfiguration,\n      transitions: stateTransition.transitions,\n      children: children,\n      done: isDone\n    });\n    var didUpdateContext = currentContext !== updatedContext;\n    nextState.changed = _event.name === update || didUpdateContext; // Dispose of penultimate histories to prevent memory leaks\n\n    var history = nextState.history;\n\n    if (history) {\n      delete history.history;\n    }\n\n    if (!resolvedStateValue) {\n      return nextState;\n    }\n\n    var maybeNextState = nextState;\n\n    if (!isDone) {\n      var isTransient = this._transient || configuration.some(function (stateNode) {\n        return stateNode._transient;\n      });\n\n      if (isTransient) {\n        maybeNextState = this.resolveRaisedTransition(maybeNextState, {\n          type: nullEvent\n        }, _event);\n      }\n\n      while (raisedEvents.length) {\n        var raisedEvent = raisedEvents.shift();\n        maybeNextState = this.resolveRaisedTransition(maybeNextState, raisedEvent._event, _event);\n      }\n    } // Detect if state changed\n\n\n    var changed = maybeNextState.changed || (history ? !!maybeNextState.actions.length || didUpdateContext || typeof history.value !== typeof maybeNextState.value || !stateValuesEqual(maybeNextState.value, history.value) : undefined);\n    maybeNextState.changed = changed; // Preserve original history after raised events\n\n    maybeNextState.historyValue = nextState.historyValue;\n    maybeNextState.history = history;\n    return maybeNextState;\n  };\n  /**\r\n   * Returns the child state node from its relative `stateKey`, or throws.\r\n   */\n\n\n  StateNode.prototype.getStateNode = function (stateKey) {\n    if (isStateId(stateKey)) {\n      return this.machine.getStateNodeById(stateKey);\n    }\n\n    if (!this.states) {\n      throw new Error(\"Unable to retrieve child state '\" + stateKey + \"' from '\" + this.id + \"'; no child states exist.\");\n    }\n\n    var result = this.states[stateKey];\n\n    if (!result) {\n      throw new Error(\"Child state '\" + stateKey + \"' does not exist on '\" + this.id + \"'\");\n    }\n\n    return result;\n  };\n  /**\r\n   * Returns the state node with the given `stateId`, or throws.\r\n   *\r\n   * @param stateId The state ID. The prefix \"#\" is removed.\r\n   */\n\n\n  StateNode.prototype.getStateNodeById = function (stateId) {\n    var resolvedStateId = isStateId(stateId) ? stateId.slice(STATE_IDENTIFIER.length) : stateId;\n\n    if (resolvedStateId === this.id) {\n      return this;\n    }\n\n    var stateNode = this.machine.idMap[resolvedStateId];\n\n    if (!stateNode) {\n      throw new Error(\"Child state node '#\" + resolvedStateId + \"' does not exist on machine '\" + this.id + \"'\");\n    }\n\n    return stateNode;\n  };\n  /**\r\n   * Returns the relative state node from the given `statePath`, or throws.\r\n   *\r\n   * @param statePath The string or string array relative path to the state node.\r\n   */\n\n\n  StateNode.prototype.getStateNodeByPath = function (statePath) {\n    if (typeof statePath === 'string' && isStateId(statePath)) {\n      try {\n        return this.getStateNodeById(statePath.slice(1));\n      } catch (e) {// try individual paths\n        // throw e;\n      }\n    }\n\n    var arrayStatePath = toStatePath(statePath, this.delimiter).slice();\n    var currentStateNode = this;\n\n    while (arrayStatePath.length) {\n      var key = arrayStatePath.shift();\n\n      if (!key.length) {\n        break;\n      }\n\n      currentStateNode = currentStateNode.getStateNode(key);\n    }\n\n    return currentStateNode;\n  };\n  /**\r\n   * Resolves a partial state value with its full representation in this machine.\r\n   *\r\n   * @param stateValue The partial state value to resolve.\r\n   */\n\n\n  StateNode.prototype.resolve = function (stateValue) {\n    var _a;\n\n    var _this = this;\n\n    if (!stateValue) {\n      return this.initialStateValue || EMPTY_OBJECT; // TODO: type-specific properties\n    }\n\n    switch (this.type) {\n      case 'parallel':\n        return mapValues(this.initialStateValue, function (subStateValue, subStateKey) {\n          return subStateValue ? _this.getStateNode(subStateKey).resolve(stateValue[subStateKey] || subStateValue) : EMPTY_OBJECT;\n        });\n\n      case 'compound':\n        if (isString(stateValue)) {\n          var subStateNode = this.getStateNode(stateValue);\n\n          if (subStateNode.type === 'parallel' || subStateNode.type === 'compound') {\n            return _a = {}, _a[stateValue] = subStateNode.initialStateValue, _a;\n          }\n\n          return stateValue;\n        }\n\n        if (!keys(stateValue).length) {\n          return this.initialStateValue || {};\n        }\n\n        return mapValues(stateValue, function (subStateValue, subStateKey) {\n          return subStateValue ? _this.getStateNode(subStateKey).resolve(subStateValue) : EMPTY_OBJECT;\n        });\n\n      default:\n        return stateValue || EMPTY_OBJECT;\n    }\n  };\n\n  StateNode.prototype.getResolvedPath = function (stateIdentifier) {\n    if (isStateId(stateIdentifier)) {\n      var stateNode = this.machine.idMap[stateIdentifier.slice(STATE_IDENTIFIER.length)];\n\n      if (!stateNode) {\n        throw new Error(\"Unable to find state node '\" + stateIdentifier + \"'\");\n      }\n\n      return stateNode.path;\n    }\n\n    return toStatePath(stateIdentifier, this.delimiter);\n  };\n\n  Object.defineProperty(StateNode.prototype, \"initialStateValue\", {\n    get: function () {\n      var _a;\n\n      if (this.__cache.initialStateValue) {\n        return this.__cache.initialStateValue;\n      }\n\n      var initialStateValue;\n\n      if (this.type === 'parallel') {\n        initialStateValue = mapFilterValues(this.states, function (state) {\n          return state.initialStateValue || EMPTY_OBJECT;\n        }, function (stateNode) {\n          return !(stateNode.type === 'history');\n        });\n      } else if (this.initial !== undefined) {\n        if (!this.states[this.initial]) {\n          throw new Error(\"Initial state '\" + this.initial + \"' not found on '\" + this.key + \"'\");\n        }\n\n        initialStateValue = isLeafNode(this.states[this.initial]) ? this.initial : (_a = {}, _a[this.initial] = this.states[this.initial].initialStateValue, _a);\n      }\n\n      this.__cache.initialStateValue = initialStateValue;\n      return this.__cache.initialStateValue;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  StateNode.prototype.getInitialState = function (stateValue, context) {\n    var configuration = this.getStateNodes(stateValue);\n    return this.resolveTransition({\n      configuration: configuration,\n      entrySet: configuration,\n      exitSet: [],\n      transitions: [],\n      source: undefined,\n      actions: []\n    }, undefined, undefined, context);\n  };\n\n  Object.defineProperty(StateNode.prototype, \"initialState\", {\n    /**\r\n     * The initial State instance, which includes all actions to be executed from\r\n     * entering the initial state.\r\n     */\n    get: function () {\n      this._init();\n\n      var initialStateValue = this.initialStateValue;\n\n      if (!initialStateValue) {\n        throw new Error(\"Cannot retrieve initial state from simple state '\" + this.id + \"'.\");\n      }\n\n      return this.getInitialState(initialStateValue);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(StateNode.prototype, \"target\", {\n    /**\r\n     * The target state value of the history state node, if it exists. This represents the\r\n     * default state value to transition to if no history value exists yet.\r\n     */\n    get: function () {\n      var target;\n\n      if (this.type === 'history') {\n        var historyConfig = this.config;\n\n        if (isString(historyConfig.target)) {\n          target = isStateId(historyConfig.target) ? pathToStateValue(this.machine.getStateNodeById(historyConfig.target).path.slice(this.path.length - 1)) : historyConfig.target;\n        } else {\n          target = historyConfig.target;\n        }\n      }\n\n      return target;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Returns the leaf nodes from a state path relative to this state node.\r\n   *\r\n   * @param relativeStateId The relative state path to retrieve the state nodes\r\n   * @param history The previous state to retrieve history\r\n   * @param resolve Whether state nodes should resolve to initial child state nodes\r\n   */\n\n  StateNode.prototype.getRelativeStateNodes = function (relativeStateId, historyValue, resolve) {\n    if (resolve === void 0) {\n      resolve = true;\n    }\n\n    return resolve ? relativeStateId.type === 'history' ? relativeStateId.resolveHistory(historyValue) : relativeStateId.initialStateNodes : [relativeStateId];\n  };\n\n  Object.defineProperty(StateNode.prototype, \"initialStateNodes\", {\n    get: function () {\n      var _this = this;\n\n      if (isLeafNode(this)) {\n        return [this];\n      } // Case when state node is compound but no initial state is defined\n\n\n      if (this.type === 'compound' && !this.initial) {\n        if (!IS_PRODUCTION) {\n          warn(false, \"Compound state node '\" + this.id + \"' has no initial state.\");\n        }\n\n        return [this];\n      }\n\n      var initialStateNodePaths = toStatePaths(this.initialStateValue);\n      return flatten(initialStateNodePaths.map(function (initialPath) {\n        return _this.getFromRelativePath(initialPath);\n      }));\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Retrieves state nodes from a relative path to this state node.\r\n   *\r\n   * @param relativePath The relative path from this state node\r\n   * @param historyValue\r\n   */\n\n  StateNode.prototype.getFromRelativePath = function (relativePath) {\n    if (!relativePath.length) {\n      return [this];\n    }\n\n    var _a = __read(relativePath),\n        stateKey = _a[0],\n        childStatePath = _a.slice(1);\n\n    if (!this.states) {\n      throw new Error(\"Cannot retrieve subPath '\" + stateKey + \"' from node with no states\");\n    }\n\n    var childStateNode = this.getStateNode(stateKey);\n\n    if (childStateNode.type === 'history') {\n      return childStateNode.resolveHistory();\n    }\n\n    if (!this.states[stateKey]) {\n      throw new Error(\"Child state '\" + stateKey + \"' does not exist on '\" + this.id + \"'\");\n    }\n\n    return this.states[stateKey].getFromRelativePath(childStatePath);\n  };\n\n  StateNode.prototype.historyValue = function (relativeStateValue) {\n    if (!keys(this.states).length) {\n      return undefined;\n    }\n\n    return {\n      current: relativeStateValue || this.initialStateValue,\n      states: mapFilterValues(this.states, function (stateNode, key) {\n        if (!relativeStateValue) {\n          return stateNode.historyValue();\n        }\n\n        var subStateValue = isString(relativeStateValue) ? undefined : relativeStateValue[key];\n        return stateNode.historyValue(subStateValue || stateNode.initialStateValue);\n      }, function (stateNode) {\n        return !stateNode.history;\n      })\n    };\n  };\n  /**\r\n   * Resolves to the historical value(s) of the parent state node,\r\n   * represented by state nodes.\r\n   *\r\n   * @param historyValue\r\n   */\n\n\n  StateNode.prototype.resolveHistory = function (historyValue) {\n    var _this = this;\n\n    if (this.type !== 'history') {\n      return [this];\n    }\n\n    var parent = this.parent;\n\n    if (!historyValue) {\n      var historyTarget = this.target;\n      return historyTarget ? flatten(toStatePaths(historyTarget).map(function (relativeChildPath) {\n        return parent.getFromRelativePath(relativeChildPath);\n      })) : parent.initialStateNodes;\n    }\n\n    var subHistoryValue = nestedPath(parent.path, 'states')(historyValue).current;\n\n    if (isString(subHistoryValue)) {\n      return [parent.getStateNode(subHistoryValue)];\n    }\n\n    return flatten(toStatePaths(subHistoryValue).map(function (subStatePath) {\n      return _this.history === 'deep' ? parent.getFromRelativePath(subStatePath) : [parent.states[subStatePath[0]]];\n    }));\n  };\n\n  Object.defineProperty(StateNode.prototype, \"stateIds\", {\n    /**\r\n     * All the state node IDs of this state node and its descendant state nodes.\r\n     */\n    get: function () {\n      var _this = this;\n\n      var childStateIds = flatten(keys(this.states).map(function (stateKey) {\n        return _this.states[stateKey].stateIds;\n      }));\n      return [this.id].concat(childStateIds);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(StateNode.prototype, \"events\", {\n    /**\r\n     * All the event types accepted by this state node and its descendants.\r\n     */\n    get: function () {\n      var e_7, _a, e_8, _b;\n\n      if (this.__cache.events) {\n        return this.__cache.events;\n      }\n\n      var states = this.states;\n      var events = new Set(this.ownEvents);\n\n      if (states) {\n        try {\n          for (var _c = __values(keys(states)), _d = _c.next(); !_d.done; _d = _c.next()) {\n            var stateId = _d.value;\n            var state = states[stateId];\n\n            if (state.states) {\n              try {\n                for (var _e = (e_8 = void 0, __values(state.events)), _f = _e.next(); !_f.done; _f = _e.next()) {\n                  var event_1 = _f.value;\n                  events.add(\"\" + event_1);\n                }\n              } catch (e_8_1) {\n                e_8 = {\n                  error: e_8_1\n                };\n              } finally {\n                try {\n                  if (_f && !_f.done && (_b = _e.return)) _b.call(_e);\n                } finally {\n                  if (e_8) throw e_8.error;\n                }\n              }\n            }\n          }\n        } catch (e_7_1) {\n          e_7 = {\n            error: e_7_1\n          };\n        } finally {\n          try {\n            if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n          } finally {\n            if (e_7) throw e_7.error;\n          }\n        }\n      }\n\n      return this.__cache.events = Array.from(events);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(StateNode.prototype, \"ownEvents\", {\n    /**\r\n     * All the events that have transitions directly from this state node.\r\n     *\r\n     * Excludes any inert events.\r\n     */\n    get: function () {\n      var events = new Set(this.transitions.filter(function (transition) {\n        return !(!transition.target && !transition.actions.length && transition.internal);\n      }).map(function (transition) {\n        return transition.eventType;\n      }));\n      return Array.from(events);\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  StateNode.prototype.resolveTarget = function (_target) {\n    var _this = this;\n\n    if (_target === undefined) {\n      // an undefined target signals that the state node should not transition from that state when receiving that event\n      return undefined;\n    }\n\n    return _target.map(function (target) {\n      if (!isString(target)) {\n        return target;\n      }\n\n      var isInternalTarget = target[0] === _this.delimiter; // If internal target is defined on machine,\n      // do not include machine key on target\n\n      if (isInternalTarget && !_this.parent) {\n        return _this.getStateNodeByPath(target.slice(1));\n      }\n\n      var resolvedTarget = isInternalTarget ? _this.key + target : target;\n\n      if (_this.parent) {\n        try {\n          var targetStateNode = _this.parent.getStateNodeByPath(resolvedTarget);\n\n          return targetStateNode;\n        } catch (err) {\n          throw new Error(\"Invalid transition definition for state node '\" + _this.id + \"':\\n\" + err.message);\n        }\n      } else {\n        return _this.getStateNodeByPath(resolvedTarget);\n      }\n    });\n  };\n\n  StateNode.prototype.formatTransition = function (transitionConfig) {\n    var _this = this;\n\n    var normalizedTarget = normalizeTarget(transitionConfig.target);\n    var internal = 'internal' in transitionConfig ? transitionConfig.internal : normalizedTarget ? normalizedTarget.some(function (_target) {\n      return isString(_target) && _target[0] === _this.delimiter;\n    }) : true;\n    var guards = this.machine.options.guards;\n    var target = this.resolveTarget(normalizedTarget);\n\n    var transition = __assign(__assign({}, transitionConfig), {\n      actions: toActionObjects(toArray(transitionConfig.actions)),\n      cond: toGuard(transitionConfig.cond, guards),\n      target: target,\n      source: this,\n      internal: internal,\n      eventType: transitionConfig.event\n    });\n\n    Object.defineProperty(transition, 'toJSON', {\n      value: function () {\n        return __assign(__assign({}, transition), {\n          target: transition.target ? transition.target.map(function (t) {\n            return \"#\" + t.id;\n          }) : undefined,\n          source: \"#{this.id}\"\n        });\n      }\n    });\n    return transition;\n  };\n\n  StateNode.prototype.formatTransitions = function () {\n    var e_9, _a;\n\n    var _this = this;\n\n    var onConfig;\n\n    if (!this.config.on) {\n      onConfig = [];\n    } else if (Array.isArray(this.config.on)) {\n      onConfig = this.config.on;\n    } else {\n      var _b = this.config.on,\n          _c = WILDCARD,\n          _d = _b[_c],\n          wildcardConfigs = _d === void 0 ? [] : _d,\n          strictOnConfigs_1 = __rest(_b, [typeof _c === \"symbol\" ? _c : _c + \"\"]);\n\n      onConfig = flatten(keys(strictOnConfigs_1).map(function (key) {\n        var arrayified = toTransitionConfigArray(key, strictOnConfigs_1[key]);\n\n        if (!IS_PRODUCTION) {\n          validateArrayifiedTransitions(_this, key, arrayified);\n        }\n\n        return arrayified;\n      }).concat(toTransitionConfigArray(WILDCARD, wildcardConfigs)));\n    }\n\n    var doneConfig = this.config.onDone ? toTransitionConfigArray(String(done(this.id)), this.config.onDone) : [];\n    var invokeConfig = flatten(this.invoke.map(function (invokeDef) {\n      var settleTransitions = [];\n\n      if (invokeDef.onDone) {\n        settleTransitions.push.apply(settleTransitions, __spread(toTransitionConfigArray(String(doneInvoke(invokeDef.id)), invokeDef.onDone)));\n      }\n\n      if (invokeDef.onError) {\n        settleTransitions.push.apply(settleTransitions, __spread(toTransitionConfigArray(String(error(invokeDef.id)), invokeDef.onError)));\n      }\n\n      return settleTransitions;\n    }));\n    var delayedTransitions = this.after;\n    var formattedTransitions = flatten(__spread(doneConfig, invokeConfig, onConfig).map(function (transitionConfig) {\n      return toArray(transitionConfig).map(function (transition) {\n        return _this.formatTransition(transition);\n      });\n    }));\n\n    try {\n      for (var delayedTransitions_1 = __values(delayedTransitions), delayedTransitions_1_1 = delayedTransitions_1.next(); !delayedTransitions_1_1.done; delayedTransitions_1_1 = delayedTransitions_1.next()) {\n        var delayedTransition = delayedTransitions_1_1.value;\n        formattedTransitions.push(delayedTransition);\n      }\n    } catch (e_9_1) {\n      e_9 = {\n        error: e_9_1\n      };\n    } finally {\n      try {\n        if (delayedTransitions_1_1 && !delayedTransitions_1_1.done && (_a = delayedTransitions_1.return)) _a.call(delayedTransitions_1);\n      } finally {\n        if (e_9) throw e_9.error;\n      }\n    }\n\n    return formattedTransitions;\n  };\n\n  return StateNode;\n}();\n\nexport { StateNode };"]},"metadata":{},"sourceType":"module"}